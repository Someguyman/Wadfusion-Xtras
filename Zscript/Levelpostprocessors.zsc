
class DCX_PlaystationSecrets : LevelPostProcessor
{
	protected void Apply(Name checksum, String mapname)
	{
		switch (checksum)
		{
			case '8590F489879870C098CD7029C3187159':
			{
				if ( CVar.FindCVar("dcx_playstationmaps").GetBool() )
				{
					SetLineActivation(1620, SPAC_Use);
					SetLineSpecial(1620, Exit_Secret, 0);
					
					SetLineActivation(680, 0);
					SetWallTexture(680,line.front,side.mid,"BROWN96");
					
					SetSectorSpecial(294, 0);
				}
				break;
			}
			case '6b60f37b91309dff1cdf02e5e476210d':
			{
				if ( CVar.FindCVar("dcx_playstationmaps").GetBool() )
				{					
					SetLineActivation(580, 0);
					AddSectorTag(11, 19);
					SetLineActivation(316, SPAC_Cross);
					SetLineActivation(317, SPAC_Cross);
					SetLineActivation(318, SPAC_Cross);
					SetLineActivation(319, SPAC_Cross);
					SetLineActivation(320, SPAC_Cross);
					SetLineSpecial(316, Door_Raise, 19, 64, 150);
					SetLineSpecial(317, Door_Raise, 19, 64, 150);
					SetLineSpecial(318, Door_Raise, 19, 64, 150);
					SetLineSpecial(319, Door_Raise, 19, 64, 150);
					SetLineSpecial(320, Door_Raise, 19, 64, 150);
					
					SetWallTextureID(574, Line.front, Side.mid, TexMan.CheckForTexture("SW2SKULL", TexMan.Type_Wall, TexMan.Overridable));
					SetLineActivation(574, SPAC_Use);
					SetLineSpecial(574, Exit_Secret, 0);
				}
				break;
			}
		}
	}
}

class DCX_Multiplayerweaponremoveal : LevelPostProcessor 
{
		protected void Apply(Name checksum, String mapname)
		{
			for (int i = 0; i < GetThingCount(); i++)
			{
				let flags = GetThingFlags(i);
				int ednum = GetThingEdNum(i);
				String mapPrefix = level.MapName.Left(3);
				mapPrefix = mapPrefix.MakeLower();
				String mapName = level.MapName.MakeLower();
				
				if ( (mapPrefix == "gba") || (mapPrefix == "dm_") )
				{
					if (ednum == 11)
					SetThingEdNum(i, 7734); 
				}
				
					if(flags & MTF_COOPERATIVE && !(flags & MTF_SINGLE))
					{
					if ( mapPrefix != "dm_" )
					{
					if ( mapPrefix != "ab_" )
					{
						if ( mapPrefix != "pl_" )
						{
							if ( (mapName != "tn_map28") || (mapName != "tn_map31") || (mapName != "tn_map32") )
							{
								if ( mapName != "psx02" )
								{
									if (ednum == 2007 || ednum == 2048 || ednum == 2008 || ednum == 2049 || ednum == 2010 || ednum == 2046 || ednum == 2047 || ednum == 17 || ednum == 8)
									SetThingEdNum(i, 0); 
								}
								
								if (ednum == 2001)
								SetThingEdNum(i, 0); 
								
								if (ednum == 2002)
								SetThingEdNum(i, 0); 

								if (ednum == 2003)
								SetThingEdNum(i, 0); 

								if (ednum == 2004)
								SetThingEdNum(i, 0); 

								if (ednum == 2005)
								SetThingEdNum(i, 0); 

								if (ednum == 2006)
								SetThingEdNum(i, 0); 

								if (ednum == 2035)
								SetThingEdNum(i, 0); 

								if (mapName != "tn_map01")
								{
									if (mapName != "psx02")
									{
										if (ednum == 82)
										SetThingEdNum(i, 0); 
									}
								}
							}
						}
						}
					}
					//Health
					if (ednum == 2012)
					SetThingEdNum(i, 2014); 
					
					//Weapons
					if (ednum == 8)
					SetThingEdNum(i, 2011); 
					
					//Powerups
					if (ednum == 2024 || ednum == 2026 || ednum == 2025 || ednum == 2018 || ednum == 2019 || ednum == 2045)
					SetThingEdNum(i, 0); 
					
					if (ednum == 14)
					SetThingEdNum(i, 0);
					
					if (ednum == 2013 || ednum == 83 || ednum == 2022 || ednum == 2026 || ednum == 2023)
					SetThingEdNum(i, 2014); 
					
					if (ednum == 16 && mapPrefix != "map")
					{
						if (mapPrefix != "dz_")
						SetThingEdNum(i, 616);
					}
					
					if (ednum == 7 && mapPrefix != "map" && mapPrefix != "ab_")
					{
						if (mapPrefix != "dz_")
						SetThingEdNum(i, 607); 
					}
					
					//Keys
					if (ednum == 13 || ednum == 5 || ednum == 6 || ednum == 38 || ednum == 40 || ednum == 39)
					SetThingEdNum(i, 0); 
			}
		}
	}
}

// Fixes the minor bugs in the maps
Class DCX_MapFixes : LevelPostProcessor
{
	protected void Apply(Name checksum, String mapname)
	{
		for (int i = 0; i < GetThingCount(); i++)
		{
			let flags = GetThingFlags(i);
			int ednum = GetThingEdNum(i);
			String mapPrefix = level.MapName.Left(3);
			mapPrefix = mapPrefix.MakeLower();
			String mapName = level.MapName.MakeLower();
			
			switch (checksum)
			{
				
			// Removes the extra pinky, now everything will be able to move
			case '3838ab29292587a7ee3ca71e7040868d': //E2M6
				SetThingEdNum(71,0);
			break;
			
			// Removes corpses hanging in the air
			case '8590f489879870c098cd7029c3187159': //E2M7
			
				SetThingEdNum(195,0);
				SetThingEdNum(196,0);
				
				//Removes soulsphere and cell pack from the secret by the starting area if psx maps are enabled
				if ( CVar.FindCVar("dcx_playstationmaps").GetBool() )
				{
					SetThingEdNum(199,0);
					SetThingEdNum(229,0);
				}
			break;
			
			//	Removes Out of Bounds and/or stuck objects and puts them in the right spot
			case 'ab24ae6e2cb13cbdd04600a4d37f9189': //MAP02
				SetThingEdNum(85,0);
				SetThingEdNum(69,0);
			break;
			
			case 'd5f64e02679a81b82006af34a6a8eac3': //pl_map32
				SetThingEdNum(515,67);
			break;
			
			case '1bc04d646b32d3a3e411daf3c1a38ff8': //E2M4
			if ( CVar.FindCVar("dcx_TextureFixes").GetBool() )
			{
				SetSectorTexture(173,0,"BLOOD3");
				SetSectorTexture(177,0,"BLOOD3");
			}
			break;
			
			
			case '5b26545ff21b051ca06d389ce535684c' : //E1M4
			if ( CVar.FindCVar("fs_toggle").GetBool() )
			{
				SetSectorTexture(6,1,"F_SKY1");
			}
			break;
			
			
			case '94D4C869A0C02EF4F7375022B36AAE45' : //E4M7 //ML_MAP35
			if ( CVar.FindCVar("dcx_TextureEchancements").GetBool() )
			{
				SetWallTexture(595,line.front,side.mid,"DOORBLU2");
				SetWallTexture(582,line.front,side.mid,"DOORBLU2");
						
				SetWallTexture(388,line.front,side.top,"DOORYEL2");
				SetWallTexture(1325,line.front,side.top,"DOORYEL2");
				SetWallTexture(1053,line.front,side.top,"DOORYEL2");
				SetWallTexture(1324,line.front,side.top,"DOORYEL2");
						
				SetWallTexture(1329,line.front,side.top,"DOORYEL2");
				SetWallTexture(210,line.front,side.top,"DOORYEL2");
				SetWallTexture(1056,line.front,side.top,"DOORYEL2");
				SetWallTexture(1327,line.front,side.top,"DOORYEL2");
						
				SetWallTexture(64,line.front,side.mid,"DOORRED2");
				SetWallTexture(68,line.front,side.mid,"DOORRED2");
			}
			break;
			
			case '3FF94E27423F91C1585B3396F0C03459' : //"Map31
			if ( CVar.FindCVar("dcx_TextureEchancements").GetBool() )
			{
				SetWallTexture(666,line.front,side.mid,"LITE5");
				SetWallTexture(668,line.front,side.mid,"LITE5");
				SetWallTexture(670,line.front,side.mid,"LITE5");
				SetWallTexture(672,line.front,side.mid,"LITE5");
			}
			break;

			case '25F93BD6E7B394A6E799421B4202084E' : //ML_MAP33
			if ( CVar.FindCVar("dcx_TextureEchancements").GetBool() )
			{
				SetWallTexture(345,line.front,side.mid,"DOORYEL2");
				SetWallTexture(347,line.front,side.mid,"DOORYEL2");						
				SetWallTexture(351,line.front,side.mid,"DOORYEL2");
				SetWallTexture(353,line.front,side.mid,"DOORYEL2");						
							
				SetWallTexture(566,line.front,side.top,"DOORBLU2");
				SetWallTexture(1167,line.front,side.top,"DOORBLU2");					
				SetWallTexture(563,line.front,side.top,"DOORBLU2");
				SetWallTexture(1165,line.front,side.top,"DOORBLU2");
							
				SetWallTexture(1025,line.front,side.top,"DOORBLU2");
				SetWallTexture(1464,line.front,side.top,"DOORBLU2");
				SetWallTexture(1466,line.front,side.top,"DOORBLU2");
				SetWallTexture(1467,line.front,side.top,"DOORBLU2");
			}
			break;
			
			case '17FFA47F0FE4368CD9710A0F3C5052D2' : //ml_map34
			if ( CVar.FindCVar("dcx_TextureEchancements").GetBool() )
			{
				SetWallTexture(370,line.front,side.top,"MARBFRED");
				SetWallTexture(380,line.front,side.top,"MARBFRED");
					
				SetWallTexture(788,line.front,side.mid,"DOORYEL");
				SetWallTexture(790,line.front,side.mid,"DOORYEL");
			}
			break;
			
			case 'F4E27C9E58975CC01801499FD66E22C3' : //ml_map11
			if ( CVar.FindCVar("dcx_TextureEchancements").GetBool() )
			{
				SetWallTexture(338,line.front,side.top,"DOORBLU2");
				SetWallTexture(341,line.front,side.top,"DOORBLU2");
				SetWallTexture(538,line.front,side.top,"DOORBLU2");
				SetWallTexture(540,line.front,side.top,"DOORBLU2");
					
				SetWallTexture(534,line.front,side.top,"DOORYEL2");
				SetWallTexture(464,line.front,side.top,"DOORYEL2");
				SetWallTexture(537,line.front,side.top,"DOORYEL2");
				SetWallTexture(461,line.front,side.top,"DOORYEL2");
					
				SetWallTexture(301,line.front,side.mid,"DOORYEL2");
				SetWallTexture(699,line.front,side.mid,"DOORYEL2");
					
				SetWallTexture(286,line.front,side.mid,"DOORYEL");
				SetWallTexture(931,line.front,side.mid,"DOORYEL");
			}
			break;
			
			case 'F3EA567C6FFFBB49AF6BDOEC773A2AF1' : //ml_map12"
			if ( CVar.FindCVar("dcx_TextureEchancements").GetBool() ) 
			{
				SetWallTexture(157,line.front,side.mid,"DOORBLU2");
				SetWallTexture(831,line.front,side.mid,"DOORBLU2");
				SetWallTexture(344,line.front,side.mid,"DOORBLU2");
				SetWallTexture(345,line.front,side.mid,"DOORBLU2");
					
				SetWallTexture(332,line.front,side.mid,"DOORBLU2");
				SetWallTexture(204,line.front,side.mid,"DOORBLU2");
				SetWallTexture(206,line.front,side.mid,"DOORBLU");
				SetWallTexture(328,line.front,side.mid,"DOORBLU");
					
				SetWallTexture(670,line.front,side.mid,"DOORRED2");
				SetWallTexture(740,line.front,side.mid,"DOORRED2");
				SetWallTexture(923,line.front,side.top,"DOORRED2");
				SetWallTexture(816,line.front,side.top,"DOORRED2");
			}
			break;

			case '8C7C674F9EE4D15DF19414A556AE3369' : //ml_map15
			if ( CVar.FindCVar("dcx_TextureEchancements").GetBool() ) 
			{
				SetWallTexture(27,line.front,side.mid,"DOORBLU2");
				SetWallTexture(244,line.front,side.mid,"DOORBLU2");
					
				SetWallTexture(667,line.front,side.mid,"DOORRED2");
				SetWallTexture(1108,line.front,side.mid,"DOORRED2");
			}
			break;
			
			case '75AD07EBOB915DE49DABCC3B9158161D' : //ml_map36
			if ( CVar.FindCVar("dcx_TextureEchancements").GetBool() ) 
			{
				SetWallTexture(3694,line.front,side.mid,"DOORRED");
				SetWallTexture(3673,line.front,side.mid,"DOORRED");
				SetWallTexture(3691,line.front,side.mid,"DOORRED");
				SetWallTexture(1530,line.front,side.mid,"DOORRED");		
			}
			break;
			
			}
		}
	}
}

//Used in case the ACS script has trouble spawning in a particular actor or two

class DCX_TotalCarnageMonsterPlacementsBackup : LevelPostProcessor 
{
		protected void Apply(Name checksum, String mapname)
		{
			for (int i = 0; i < GetThingCount(); i++)
			{
				let flags = GetThingFlags(i);
				int ednum = GetThingEdNum(i);
				String mapPrefix = level.MapName.Left(3);
				mapPrefix = mapPrefix.MakeLower();
				String mapName = level.MapName.MakeLower();
				
				//Adding the unmaker and demonkeys into the maps.
				
				if ( CVar.FindCVar("dcx_D64D2Xtras").GetBool() )
				{					
					if ( mapName == "ab_map06" )
					{
						SetThingEdNum(81,666); //Replaces secret plasmagun
					}				
					if ( mapName == "ab_map14" )
					SetThingEdNum(137,668);	//Replaces the megasphere that stood where it was in doom 64.
				
					if ( mapName == "ab_map32" )
					SetThingEdNum(106,669);	//Replaces the megasphere on top of the platform
				
					if ( mapName == "ab_map15" )
					SetThingEdNum(291,666);	//Replaces the bfg in the red key room where the unmaker was in the original doom 64
				
					if ( mapName == "ab_map28" )
					SetThingEdNum(73,666);	//Replaces the plasmagun on the secret lift
					
					if ( mapName == "ab_map30" )
					{
						SetThingEdNum(6,666);  //Replaces the backpack in penultimate room						
					}			
				}
				
				//Will only activeate on "Total Carnage" and "ULTRA NIGHTMARE!" difficulties. 
				If (CallACS("Check_Difficulty") == 2)
				{
					if ( mapName == "e1m4b" )
					{
						AddThing(3005, (268, 8, -999), 135);
						AddThing(3005, (368, 0, -999), 135);
						
						AddThing(3005, (352, -496, -999), 225);
						
						AddThing(3005, (-448, 1032, -999), 270);
						AddThing(3005, (216, 1032, -999), 270);
						
						AddThing(3005, (748, -220, -999), 45);
						
						AddThing(3005, (480, -192, -999), 135);
						AddThing(3005, (480, -256, -999), 225);
						AddThing(3005, (544, -224, -999), 0);					
					}
					if ( mapName == "e1m8" )
					{
						AddThing(697, (48, 688, 999), 45);
						AddThing(697, (784, 688, 999), 135);
					}
					if ( mapName == "e1m8b" )
					{
						SetThingEdNum(142,697);
						SetThingEdNum(148,697);
						SetThingEdNum(160,697);
						
						SetThingEdNum(195,9);
						SetThingEdNum(196,9);
						SetThingEdNum(201,9);
						SetThingEdNum(202,9);
						
						SetThingEdNum(191,65);
						SetThingEdNum(197,65);
						
						SetThingEdNum(194,697);
						SetThingEdNum(200,697);
					}
					if ( mapName == "e2m3" )
					{
						AddThing(2006, (864, -64, -999), 270,MODES_ALL | MTF_AMBUSH);
					}
					if ( mapName == "e3m3" )
					{
						SetThingEdNum(71,697);
						SetThingEdNum(97,697);
						SetThingEdNum(139,697);
						SetThingEdNum(151,697);
						SetThingEdNum(198,697);
					}
					if ( mapName == "e3m5" )
					{
						SetThingEdNum(217,64);
						
						SetThingEdNum(160,69);
						SetThingEdNum(161,69);
						
						//;)
						
						SetThingEdNum(4,697);
						SetThingEdNum(5,697);
						SetThingEdNum(6,697);
						SetThingEdNum(7,697);
						SetThingEdNum(8,697);
						SetThingEdNum(9,697);
						SetThingEdNum(108,697);
					}
					if ( mapName == "e4m7" )
					{
						SetThingEdNum(131,69);
						
						SetThingEdNum(170,66);
						SetThingEdNum(171,66);
						
						SetThingEdNum(49,65);
						
						SetThingEdNum(42,66);
						SetThingEdNum(43,66);
						
						SetThingEdNum(10,66);
						SetThingEdNum(11,66);
						
						SetThingEdNum(176,71);
						
						SetThingEdNum(62,82);
					}
					if ( mapName == "psx04" )
					{
						SetThingEdNum(304,3003);
						SetThingEdNum(305,3003);
						SetThingEdNum(306,3003);
						SetThingEdNum(307,3003);
						SetThingEdNum(308,3003);
						SetThingEdNum(309,3003);
						SetThingEdNum(310,3003);
						SetThingEdNum(311,3003);
						SetThingEdNum(312,3003);
					}
					if ( mapName == "e5m1" )
					{
						SetThingEdNum(157,697);
					}
					if ( mapName == "e5m3" )
					{
						SetThingEdNum(67,710);
				
						AddThing(697,(-448,-2016,-999),135);
						AddThing(697,(-800,-2016,-999),45);
				
						AddThing(697,(-704,-2432,-999),45);
						AddThing(697,(-512,-2432,-999),135);
					}
					if ( mapName == "e5m4" )
					{
						SetThingEdNum(37,686);
						SetThingEdNum(89,686);
						SetThingEdNum(261,686);
						SetThingEdNum(268,686);
					}
					if ( mapName == "e5m5" )
					{
						SetThingEdNum(23,69);
						SetThingEdNum(110,69);
						SetThingEdNum(109,69);
						SetThingEdNum(354,69);
					}
					if ( mapName == "e5m6" )
					{
						SetThingEdNum(31,69);
						SetThingEdNum(32,69);
						SetThingEdNum(33,69);
				
						SetThingEdNum(80,69);
						SetThingEdNum(116,69);
						SetThingEdNum(181,69);
					}
					if ( mapName == "e5m7" )
					{
						SetThingEdNum(55,685);
				
						SetThingEdNum(104,686);				
						SetThingEdNum(214,686);
						SetThingEdNum(215,686);
						SetThingEdNum(372,686);
					}
					if ( mapName == "e5m8" )
					{
						SetThingEdNum(55,685);
				
						SetThingEdNum(201,697);			
						SetThingEdNum(204,697);
				
						SetThingEdNum(206,697);
						SetThingEdNum(208,697);
				
						AddThing(82,(1472,-552,999),90,MODES_ALL | MTF_AMBUSH);
					}		
					if ( mapName == "e5m9" )
					{
						SetThingEdNum(164,697);
				
						AddThing(58,(-1824,24,999),90,MODES_ALL | MTF_AMBUSH);
						AddThing(58,(-1440,24,999),90,MODES_ALL | MTF_AMBUSH);
						AddThing(697,(-1632,24,-999),90,MODES_ALL | MTF_AMBUSH);
					}
					if ( mapName == "map01" )
					{						
						SetThingEdNum(20,9);
						SetThingEdNum(21,9);
						SetThingEdNum(22,9);
						
						SetThingEdNum(11,65);
						SetThingEdNum(12,65);
						SetThingEdNum(13,65);
						SetThingEdNum(14,65);
						SetThingEdNum(31,65);
						SetThingEdNum(48,65);
						SetThingEdNum(32,65);
						
						SetThingEdNum(51,66);
					}
					if ( mapName == "map02" )
					{
						SetThingEdNum(35,65);
						SetThingEdNum(145,65);
						
						SetThingEdNum(17,66);
						SetThingEdNum(18,66);
						
						SetThingEdNum(19,65);
						SetThingEdNum(20,65);
						
						SetThingEdNum(33,65);
						
						SetThingEdNum(46,69);
						SetThingEdNum(47,69);
						SetThingEdNum(48,69);
						
						SetThingEdNum(151,69);
						SetThingEdNum(152,69);
						
						AddThing(65,(1440,1360,-999),0);
					}
					if ( mapName == "map03" )
					{
						SetThingEdNum(103,3003);
						
						SetThingEdNum(108,69);
						SetThingEdNum(109,69);
						
						SetThingEdNum(142,66);
						SetThingEdNum(143,66);
						
						SetThingEdNum(144,66);
						
						SetThingEdNum(121,69);
						AddThing(69,(2624,2016,-999),90);
						AddThing(69,(2816,2016,-999),90);
						
						SetThingEdNum(107,697);
						AddThing(697,(3040,2336,-999),90);
					}
					if ( mapName == "map04" )
					{
						SetThingEdNum(15,65);
						
						SetThingEdNum(64,697);
						
						SetThingEdNum(73,66);
						
						SetThingEdNum(22,66);
						SetThingEdNum(23,66);
						SetThingEdNum(24,66);
						SetThingEdNum(84,66);
						SetThingEdNum(132,69);
					}					
					if ( mapName == "map05" )
					{			
						SetThingEdNum(46,2003);
						
						SetThingEdNum(167,0);
						SetThingEdNum(168,0);
						SetThingEdNum(169,0);
						
						SetThingEdNum(183,69);
						
						SetThingEdNum(186,67);
						
						SetThingEdNum(197,66);
						SetThingEdNum(198,66);
						
						SetThingEdNum(19,66);
						SetThingEdNum(21,66);
						SetThingEdNum(23,66);
						SetThingEdNum(25,66);
						
						SetThingEdNum(20,65);
						SetThingEdNum(22,65);
						SetThingEdNum(24,65);

						SetThingEdNum(93,64);						
						SetThingEdNum(95,64);						
						
						SetThingEdNum(61,66);
						
						SetThingEdNum(56,2023);
						SetThingEdNum(215,2013);
					}
					if ( mapName == "map06" )
					{
						AddThing(697,(2144,1664,-999),180);
						AddThing(697,(2240,1760,-999),180);
						AddThing(697,(2240,1568,-999),180);
						
						SetThingEdNum(245,697);
						
						SetThingEdNum(220,9);
						SetThingEdNum(221,9);
					}
					if ( mapName == "map07" )
					{
						AddThing(17,(-672,-96,-999),135);
						AddThing(17,(-544,-224,-999),315);
						AddThing(17,(-672,-224,-999),225);
						AddThing(17,(-544,-96,-999),45);
						
						/*					
						⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⠛⠛⠛⠋⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠙⠛⠛⠛⠿⠻⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
						⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀⠀⡀⠠⠤⠒⢂⣉⣉⣉⣑⣒⣒⠒⠒⠒⠒⠒⠒⠒⠀⠀⠐⠒⠚⠻⠿⠿⣿⣿⣿⣿⣿⣿⣿
						⣿⣿⣿⣿⣿⣿⣿⣿⠏⠀⠀⠀⠀⡠⠔⠉⣀⠔⠒⠉⣀⣀⠀⠀⠀⣀⡀⠈⠉⠑⠒⠒⠒⠒⠒⠈⠉⠉⠉⠁⠂⠀⠈⠙⢿⣿⣿⣿⣿
						⣿⣿⣿⣿⣿⣿⣿⠇⠀⠀⠀⠔⠁⠠⠖⠡⠔⠊⠀⠀⠀⠀⠀⠀⠀⠐⡄⠀⠀⠀⠀⠀⠀⡄⠀⠀⠀⠀⠉⠲⢄⠀⠀⠀⠈⣿⣿⣿⣿⣿⣿
						⣿⣿⣿⣿⣿⣿⠋⠀⠀⠀⠀⠀⠀⠀⠊⠀⢀⣀⣤⣤⣤⣤⣀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠜⠀⠀⠀⠀⣀⡀⠀⠈⠃⠀⠀⠀⠸⣿⣿⣿⣿⣿
						⣿⣿⣿⣿⡿⠥⠐⠂⠀⠀⠀⠀⡄⠀⠰⢺⣿⣿⣿⣿⣿⣟⠀⠈⠐⢤⠀⠀⠀⠀⠀⠀⢀⣠⣶⣾⣯⠀⠀⠉⠂⠀⠠⠤⢄⣀⠙⢿⣿⣿
						⣿⡿⠋⠡⠐⠈⣉⠭⠤⠤⢄⡀⠈⠀⠈⠁⠉⠁⡠⠀⠀⠀⠉⠐⠠⠔⠀⠀⠀⠀⠀⠲⣿⠿⠛⠛⠓⠒⠂⠀⠀⠀⠀⠀⠀⠠⡉⢢⠙⣿
						⣿⠀⢀⠁⠀⠊⠀⠀⠀⠀⠀⠈⠁⠒⠂⠀⠒⠊⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⢀⣀⡠⠔⠒⠒⠂⠀⠈⠀⡇⣿⣿⣿
						⣿⠀⢸⠀⠀⠀⢀⣀⡠⠋⠓⠤⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠄⠀⠀⠀⠀⠀⠀⠈⠢⠤⡀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⡠⠀⡇⣿⣿⣿
						⣿⡀⠘⠀⠀⠀⠀⠀⠘⡄⠀⠀⠀⠈⠑⡦⢄⣀⠀⠀⠐⠒⠁⢸⠀⠀⠠⠒⠄⠀⠀⠀⠀⠀⢀⠇⠀⣀⡀⠀⠀⢀⢾⡆⠀⠈⡀⠎⣸⣿⣿
						⣿⣿⣄⡈⠢⠀⠀⠀⠀⠘⣶⣄⡀⠀⠀⡇⠀⠀⠈⠉⠒⠢⡤⣀⡀⠀⠀⠀⠀⠀⠐⠦⠤⠒⠁⠀⠀⠀⠀⣀⢴⠁⠀⢷⠀⠀⠀⢰⣿⣿⣿
						⣿⣿⣿⣿⣇⠂⠀⠀⠀⠀⠈⢂⠀⠈⠹⡧⣀⠀⠀⠀⠀⠀⡇⠀⠀⠉⠉⠉⢱⠒⠒⠒⠒⢖⠒⠒⠂⠙⠏⠀⠘⡀⠀⢸⠀⠀⠀⣿⣿⣿
						⣿⣿⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠑⠄⠰⠀⠀⠁⠐⠲⣤⣴⣄⡀⠀⠀⠀⠀⢸⠀⠀⠀⠀⢸⠀⠀⠀⠀⢠⠀⣠⣷⣶⣿⠀⠀⢰⣿⣿⣿⣿
						⣿⣿⣿⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠁⢀⠀⠀⠀⠀⠀⡙⠋⠙⠓⠲⢤⣤⣷⣤⣤⣤⣤⣾⣦⣤⣤⣶⣿⣿⣿⣿⡟⢹⠀⠀⢸⣿⣿⣿
						⣿⣿⣿⣿⣿⣿⣿⣧⡀⠀⠀⠀⠀⠀⠀⠀⠑⠀⢄⠀⡰⠁⠀⠀⠀⠀⠀⠈⠉⠁⠈⠉⠻⠋⠉⠛⢛⠉⠉⢹⠁⢀⢇⠎⠀⠀⢸⣿⣿⣿
						⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⣀⠈⠢⢄⡉⠂⠄⡀⠀⠈⠒⠢⠄⠀⢀⣀⣀⣰⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⢀⣎⠀⠼⠊⠀⠀⠀⠘⣿⣿⣿
						⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣄⡀⠉⠢⢄⡈⠑⠢⢄⡀⠀⠀⠀⠀⠀⠀⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠁⠀⠀⢀⠀⠀⠀⠀⠀⢻⣿⣿
						⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣦⣀⡈⠑⠢⢄⡀⠈⠑⠒⠤⠄⣀⣀⠀⠉⠉⠉⠉⠀⠀⠀⣀⡀⠤⠂⠁⠀⢀⠆⠀⠀⢸⣿
						⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣦⣄⡀⠁⠉⠒⠂⠤⠤⣀⣀⣉⡉⠉⠉⠉⠉⢀⣀⣀⡠⠤⠒⠈⠀⠀⠀⠀⣸⣿
						⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣶⣤⣄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⣿
						⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⣶⣶⣤⣤⣤⣤⣀⣀⣤⣤⣤⣶⣾⣿⣿⣿⣿
						*/
					}
					if ( mapName == "map11" )
					{
						SetThingEdNum(190,697);
					}
					if ( mapName == "map13" )
					{
						SetThingEdNum(11,697);
						SetThingEdNum(13,697);
						SetThingEdNum(17,697);
						
						SetThingEdNum(166,697);
						
						AddThing(697,(1552,-3072,-999),180);
					}
					if ( mapName == "map14" )
					{
						SetThingEdNum(92,697);
					}
					if ( mapName == "map17" )
					{
						AddThing(686,(-2336,-1472,-999),0);
					}
					if ( mapName == "map27" )
					{
						SetThingEdNum(74,697);
						SetThingEdNum(75,697);
						SetThingEdNum(76,697);
						SetThingEdNum(77,697);
					}
					if ( mapName == "map31" )
					{
						AddThing(65,(-4000,-1184,-999),0);
						AddThing(65,(-4000,-1248,-999),0);
						AddThing(65,(-3936,-1184,-999),0);
						AddThing(65,(-3936,-1248,-999),0);
						
						AddThing(697,(-4160,-1216,-999),0);
					}
					if ( mapName == "map32" )
					{
						SetThingEdNum(60,711);
						
						AddThing(3003,(416,7720,-999),270);
						AddThing(3003,(480,7720,-999),270);
						AddThing(3003,(352,7776,-999),270);
						AddThing(3003,(416,7776,-999),270);
						AddThing(3003,(480,7776,-999),270);
						AddThing(3003,(544,7776,-999),270);
						AddThing(3003,(384,7840,-999),270);
						AddThing(3003,(448,7840,-999),270);
						AddThing(3003,(512,7840,-999),270);
					}
					if ( mapName == "nv_map08" )
					{
						SetThingEdNum(59,711);
					}
				}
				
				Break;
			}
		}
}

//		List of Standard Editor Numbers for convience sake.		//


//	Zombieman = 			3004
//	ShotgunGuy = 		   	   9
//	ChaingunGuy = 		  	  65
//	DoomImp = 				3001
//	PinkyDemon = 			3002
//	SpectreDemon = 		  	  58
//	LostSoul = 				3006
//	Cacodemon = 			3005
//	Hellknight = 		 	  69
//	Baronofhell = 			3003
//	Arachnotron = 		  	  68
//	Painelemental = 	  	  71
//	Revenant = 			  	  66
//	Mancubus/Fatso = 	  	  67
//	Archvile = 			  	  64
//	SpiderMastermind = 	   	   7
//	Cyberdemon = 		  	  16
//	WolfensteinSS = 	  	  84
//	CommanderKeen = 	  	  72
//	BossBrain =				  88

//	NightmareImp = 		 	 685
//	NightmareDemon = 	 	 697
//	NightmareCacodemon = 	 686	

//	Ghoul = 				3007
//	Banshee = 				3008
//	Mindweaver = 			3009
//	ShockTropper = 			3010
//	Vassago = 				3011
//	Tyrant = 				3012


//	Pistol = 				5010
//	Shotgun = 				2001
//	SuperShotgun = 		  	  82
//	Chaingun = 				2002
//	RocketLauncher = 		2003
//	PlasmaRifle = 			2004
//	BFG9000 = 				2006
//	Incenerator = 			3145
//	Calamity Blade = 		3146


//	Clip = 					2007
//	Clipbox = 				2048
//	Shell = 				2008
//	ShellBox =  			2049
//	Rocket = 				2010
//	RocketBox = 			2046
//	Cell = 					2047
//	CellPack = 	  		  	  17
//	GasCan = 				3143
//	GasTank = 				3144
//	BackPack = 	   		       8


//	SoulSphere = 			2013
//	BlurSphere = 			2024
//	InvulnerabilitySphere = 2022
//	MegaSphere = 			  83

//	Berserk = 				2023
//	Radsuit = 				2025
//	ComputerAreaMap = 		2026
//	LightAmplification = 	2045


//	ArmorBonus = 			2015
//	GreenArmor =			2018
//	BlueArmor = 			2019

//	HealthBonus =			2014
//	StimPack =				2011
//	MedKit =				2012

//	ExplosiveBarrel = 		2035

//	Red KeyCard = 			  13
//	Blue KeyCard = 			   5
//	Yellow KeyCard = 		   6

//	Red SkullKey = 			  38
//	Blue SkullKey = 		  40
//	Yellow SkullKey = 		  39

//	Stalagmite = 			  47
//	ShortGreyTree = 		  43
//	TallBrownTree =			  54
//	TechnoPillar =			  48

//	BurningBarrel = 		  70
//	FloorLamp = 			2028
//	ShortTechnoLamp = 		  86
//	TallTechnoLamp =		  85

//	ShortGreenPillar = 		  31
//	PillarBeatingHeart = 	  36
//	TallGreenPillar = 		  30
//	ShortRedPillar = 		  33
//	SkullPillar =			  37
//	TallRedPillar =			  32

//	Candle = 				  34
//	Candlelabra = 			  35

//	ShortBlueFireStick = 	  55
//	TallBlueFireStick = 	  44
//	ShortGreenFireStick = 	  56
//	TallGreenFireStick = 	  45
//	ShortRedFireStick = 	  57
//	TallRedFireStick = 	  	  46

//	EvilEye = 				  41
//	SkullRock =				  42

//	PoolOfBlood =			  80
//	PoolOfBrains =			  81
//	PoolOfBlood&Guts =		  79
//	PoolOfBlood&Bones = 	  24

//	DeadZombie = 			  18
//	DeadSeregant = 			  19
//	DeadImp = 				  20
//	DeadLostsoul = 			  23
//	DeadPinkyDemon = 		  21
//	DeadCacodemon = 		  22
//	DeadPlayer = 			  15
//	BloodyMess1 = 			  10
//	BloodyMess2 = 			  12

//	SkullCandle =			  29
//	SkullPole = 			  27
//	SkullKebob =			  28
//	ImpailedBody =			  25
//	TwitchingBody =			  26

//	HangingLeg =			  62
//	BlockingLeg =			  53
//	HangingPairOfLegs =		  60
//	BlockingPairOfLegs =	  52
//	HangingDudeLeg =		  61
//	BlockingDudeLeg =		  61
//	HangingDudeArms =		  59
//	BlockingDudeArms =		  50
//	HangingDudeTwitch =		  63
//	BlockingDudeTwitch =	  49

//	TorsoNoBrain = 			  78
//	TorsoOpenSkull =		  76
//	TorsoLookingDown =		  75
//	TorsoLookingup =		  77
//	VictimNoguts = 			  73
//	VictimNoguts&Brain =	  74

//	HangingBaron =			3110
//	BlockingBaron =			3111


//Map Checksum List

//Doom 1/Ultimate Doom:

//Episode 1 (Knee Deep In The Dead):

//E1M1 Original Doom (No deathmatch Button): 					   		3cb5fae83b470a9accd9b9b2102447df.
//E1M1 Ultimate Doom (Button by the two pillars in the staircase): 		b49f7a6c519757d390d52667db7d8793.
//E1M2: 																81a4cc5136cbfa49345654190a626c09.
//E1M3:																	c7ff2282bc606ffb28ddcb90357094e6.
//E1M4:																	5b26545ff21b051ca06d389ce535684c.
//E1M4B:																1D80B17F6283346D35EDB86CD684C4D3.
//E1M5:																	66d8e54b173041f981a11cce766c4215.
//E1M6:																	5faa25f5a6aab3409cae0af87f910341.
//E1M7:																	9007f68e7f351a5758198933336f6b9f.
//E1M8:																	058fb092ea1b70da1e3cbf501c4a91a1.
//E1M8B:																A1F105211112747EE50BA520462A471E.
//E1M9:																	1dbf91738492fb0e29836a2d66406cf1.
//E1M10:																6909D27311BD83E6D9076AFC3B5AA145.

//Episode 2 (The Shores Of Hell):

//E2M1:																	65455AC523799F8DCE19F3D1968776AZ.
//E2M2:																	a24fe135d5b6fd427fe27bef89717a65.
//E2M3:																	918436b3c2d0ad4f2c108183414b4612.
//E2M4:																	1BC04D646B32D3A3E411DAF3C1A38FF8.
//E2M5:																	99C580AD8FABE923CAB485CB7F3C5E5D.
//E2M6:																	3838AB29292587A7EE3CA71E7040868D.
//E2M7:																	8590F489879870C098CD7029C3187159.
//E2M8:																	effe91df41ad41f6973c06f0ad67ddb9.
//E2M9:																	8A6399FAAA2E68649D4E4B16642074BE.

//Episode 3 (Inferno):

//E3M1:																	c4a89a481a32bfeddeb82e818f2bdec5
//E3M2:																	BBDC4253AE277DA5FCE2F19561627496.
//E3M3:																	f951882cb5a8def910f0ed966a1054c5
//E3M4:																	2b65cb046ea40d2e44576949381769ca
//E3M5:																	100106C75157B7DECB0DCAD2A59C1919.
//E3M6:																	100106c75157b7decb0dcad2a59c1919
//E3M7:																	5AC51CA9F1B57D4538049422A5E37291.
//E3M8:																	ef128313112110ed6c1549af96af26c9
//E3M9:																	FE97DCB9E6235FB3C52AE7C143160D73.

//Episode 4 (Thy Flesh Consumed):

//E4M1:																	DA0C8281AC70EEC31127C228BCD7FE2C.
//E4M2:																	771092812F38236C9DF2CB06B2D6B24F.
//E4M3:																	F6EE16F770AD309D608EA0B1F1E249FC.
//E4M4:																	AAECADD4D97970AFF702D86FAFAC7D17.
//E4M5:																	C2E09AB0BDD03925305A48AE935B71CA.
//E4M6:																	CBBFF61A8C231DFFC8E8A2A2BAEB77FF.
//E4M7:																	94D4C869A0C02EF4F7375022B36AAE45.
//E4M8:																	2DC939E508AB8EB68AF79D5B60568711
//E4M9:																	78556D238FFEC8058CACC48B847E1FAB.

//Episode 5 (SI6IL):

//E5M1:
//E5M2:
//E5M3:
//E5M4:
//E5M5:
//E5M6:
//E5M7:
//E5M8:
//E5M9:

//Episode 6 (SI6IL II):

//E6M1:
//E6M2:
//E6M3:
//E6M4:
//E6M5:
//E6M6:
//E6M7:
//E6M8:
//E6M9:

//Doom 2 Hell On Earth:

//Episode 1 (Subterranean Starport):

//Map01:																	
//Map33:																	
//Map02:																	
//Map03:																	
//Map04:																	
//Map05:																	
//Map06:																	
//Map07:																	
//Map08:																	
//Map09:																	
//Map10:																	
//Map11:																	

//Episode 2 (Into The City):

//Map12:																	
//Map13:																	
//Map14:																	
//Map15:																	
//Map31:																	3FF94E27423F91C1585B3396F0C03459.
//Map32:																	AA4CA3FC891D13821ACCABD836E29EB5.
//Map16:																	
//Map17:																	
//Map18:																	
//Map19:																	
//Map20:																	

//Episode 3 (Hell Incarnate):

//Map21:																	
//Map22:																	
//Map23:																	
//Map24:																	
//Map25:																	
//Map26:																	
//Map27:																	
//Map28:																	
//Map29:																	
//Map30:																	5EECD88F4491F516D590CE4BBF45F532.

//Episode 4 (No Rest For The Living):

//nv_Map01:																	
//nv_Map02:																	
//nv_Map03:																	
//nv_Map04:																	
//nv_Map05:																	
//nv_Map06:																	
//nv_Map07:																	
//nv_Map08:																	
//nv_Map09:																	

//Episode 5 (The Vulcan Abyss):

//lr_Map01:																	
//lr_Map02:																	
//lr_Map03:																	
//lr_Map04:																	
//lr_Map05:																	
//lr_Map06:																	
//lr_Map07:																	
//lr_Map15:																	

//Episode 6 (Counterfeit Eden):

//lr_Map08:																	
//lr_Map09:																	
//lr_Map10:																	
//lr_Map11:																	
//lr_Map12:																	
//lr_Map13:																	
//lr_Map14:																	
//lr_Map16:																	

//Bonus Legacy Of Rust Level	

//lr_Map99:																																

//Master Levels For Doom 2:

//Inferno Series

//ml_Map33:																	25F93BD6E7B394A6E799421B4202084E.
//ml_Map34:																	17FFA47F0FE4368CD9710A0F3C5052D2.
//ml_Map11:																	F4E27C9E58975CC01801499FD66E22C3.
//ml_Map12:																	F3EA567C6FFFBB49AF6BDOEC773A2AF1.
//ml_Map13:																	3B9CAA02952F405269353FAAD8F8EC33.
//ml_Map14:																	72921800B7E85C6868CA9E3B1BF997A1.
//ml_Map15:																	8C7C674F9EE4D15DF19414A556AE3369.
//ml_Map35:																	(Same as e4m7).
//ml_Map36:																	75AD07EBOB915DE49DABCC3B9158161D.

//Final Doom, TNT Evilution:

//Episode 1 (The Io Invasion):

//Episode 2 (Nocturnal Io):

//Episode 3 (Hell On Io):

//Final Doom, The Plutonia Experiment:

//Episode 1 (Jungle Assault):

//Episode 2 (The Blood Tides):

//Episode 3 (Devil Hive):