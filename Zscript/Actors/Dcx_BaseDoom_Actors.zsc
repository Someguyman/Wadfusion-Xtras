//

class DCX_BlurSphere : BlurSphere Replaces BlurSphere
{
	Default
	{
		-VISIBILITYPULSE
	}
}	

class DCX_ZombieMan : ZombieMan Replaces ZombieMan
{
	States
	{
		Missile:
			POSS A 0 A_Jumpif(Cvar.getcvar("DCX_EnchancesMonsters").getint() == 1 , "Missle.Enchanced");
			POSS E 10 A_FaceTarget;
			POSS F 8 Bright A_PosAttack;
			POSS E 8;
			Goto See;
		Missle.Enchanced:
			POSS E 10 A_FaceTarget;
			POSS F 4 Bright A_PosAttack;
			POSS E 12;
			Goto See;
	}
}

class DCX_ShotgunGuy : ShotgunGuy Replaces ShotgunGuy
{
	States
	{
		Missile:
			SPOS A 0 A_Jumpif(Cvar.getcvar("DCX_EnchancesMonsters").getint() == 1 , "Missle.Enchanced");
			SPOS E 10 A_FaceTarget;
			SPOS F 10 BRIGHT A_SposAttackUseAtkSound;
			SPOS E 10;
			Goto See;
		Missle.Enchanced:
			SPOS E 10 A_FaceTarget;
			SPOS F 4 BRIGHT A_SposAttackUseAtkSound;
			SPOS E 16;
			Goto See;
	}
}

class DCX_ChaingunGuy : ChaingunGuy Replaces ChaingunGuy
{
	States
	{
		Missile:
			CPOS E 10 A_FaceTarget;
			CPOS A 0 A_Jumpif(Cvar.getcvar("DCX_EnchancesMonsters").getint() == 1 , "Missle.Enchanced");
			CPOS FE 4 BRIGHT A_CPosAttack;
			CPOS F 1 A_CPosRefire;
			Goto Missile+1;
		Missle.Enchanced:
			CPOS F 2 BRIGHT A_CPosAttack;
			CPOS E 2 BRIGHT;
			CPOS F 1 A_CPosRefire;
			Goto Missile+1;
	}		
}

class DCX_Spectre : Spectre replaces Spectre
{
	default
	{
		RenderStyle "OptFuzzy";
		Alpha 0.3;
		Translation "SpectreColor";
	}
}

class DCX_LostSoul : LostSoul replaces LostSoul
{
	Default
	{
		-COUNTKILL
	}
}

Class DCX_Hellknight : Hellknight Replaces Hellknight
{
	Default
	{
		BloodColor "30 67 23";
	}
	
	void A_BruiserAttack()
	{
		if ( Cvar.getcvar("DCX_EnchancesMonsters").getint() == 1 )
			A_CustomComboAttack("BaronBall", 28, 10 * random(1, 8), "baron/melee");
		else
			A_CustomComboAttack("BaronBall", 32, 10 * random(1, 8), "baron/melee");
		A_FaceTarget();
	}
	
	States
	{
	Missile:
		BOS2 EF 8 A_FaceTarget;
		BOS2 G 8 A_BruiserAttack();
		Goto See;
	}
}

Class DCX_Baronofhell : Baronofhell Replaces Baronofhell
{
	Default
	{
		BloodColor "30 67 23";
	}
	
	void A_BruiserAttack()
	{
		if ( Cvar.getcvar("DCX_EnchancesMonsters").getint() == 1 )
			A_CustomComboAttack("BaronBall", 28, 10 * random(1, 8), "baron/melee");
		else
			A_CustomComboAttack("BaronBall", 32, 10 * random(1, 8), "baron/melee");
		A_FaceTarget();
	}
	
	States
	{
	Missile:
		BOSS EF 8 A_FaceTarget;
		BOSS G 8 A_BruiserAttack();
		Goto See;
	}
}

class DCX_Arachnotron : Arachnotron Replaces Arachnotron
{
	void A_ArachnotronFire()
	{
		//dcx_EnchancesMonsters
		If( Cvar.getcvar("DCX_EnchancesMonsters").getint() == 1 )
		{ A_SpawnProjectile("ArachnotronPlasma",19,4); A_FaceTarget(); }
		Else
		{ A_BspiAttack(); }
	}
	States
	{
	Missile:
		BSPI A 20 A_FaceTarget;
		BSPI G 4 BRIGHT A_ArachnotronFire(); 
		BSPI H 4 BRIGHT;
		BSPI H 1 BRIGHT A_SpidRefire;
		Goto Missile+1;
	}
}

class DCX_Mancubus : Fatso Replaces Fatso
{
	Void A_Menablanablah1()
	{
		If( Cvar.getcvar("DCX_EnchancesMonsters").getint() == 1 )
		{
			A_FaceTarget();
			A_SpawnProjectile("FatShot",18,34,0);
			A_SpawnProjectile("FatShot",18,-34,20);
		}
		else
			A_FatAttack1();
	}
	
	Void A_Menablanablah2()
	{
		If( Cvar.getcvar("DCX_EnchancesMonsters").getint() == 1 )
		{
			A_FaceTarget();
			A_SpawnProjectile("FatShot",18,34,-20);
			A_SpawnProjectile("FatShot",18,-34,0);
		}
		else
			A_FatAttack2();
	}
	
	Void A_Menablanablah3()
	{
		If( Cvar.getcvar("DCX_EnchancesMonsters").getint() == 1 )
		{
			A_FaceTarget();
			A_SpawnProjectile("FatShot",18,34,-8);
			A_SpawnProjectile("FatShot",18,-34,8);
		}
		else
			A_FatAttack3();
	}
	
	States
	{
		Missile:
			FATT G 20 A_FatRaise;
			FATT H 10 BRIGHT A_Menablanablah1();
			FATT IG 5 A_FaceTarget;
			FATT H 10 BRIGHT A_Menablanablah2();
			FATT IG 5 A_FaceTarget;
			FATT H 10 BRIGHT A_Menablanablah3();
			FATT IG 5 A_FaceTarget;
			Goto See;
	}
}

class DCX_ArchvileFire : ArchvileFire replaces ArchvileFire
{
	void A_StartFire()
	{
		A_Fire();
		A_Startsound("vile/firestrt", CHAN_AUTO);
	}
	States
	{
	Spawn:
		FIRE A 1 BRIGHT;
		FIRE A 1 BRIGHT  A_StartFire();
		FIRE BAB 2 BRIGHT  A_Fire;
		FIRE C 2 BRIGHT  A_FireCrackle;
		FIRE BCBCDCDCDEDED 2 BRIGHT  A_Fire;
		FIRE E 2 BRIGHT  A_FireCrackle;
		FIRE FEFEFGHGHGH 2 BRIGHT  A_Fire;
		Stop;
	}
}

class DCX_Revenant : Revenant Replaces Revenant
{
	States
	{
		Melee:
			SKEL G 0 A_Jumpif(Cvar.getcvar("DCX_EnchancesMonsters").getint() == 1 , "Melee.Enchanced");
			SKEL G 0 A_FaceTarget;
			SKEL G 6 A_SkelWhoosh;
			SKEL H 6 A_FaceTarget;
			SKEL I 6 A_SkelFist;
			Goto See;
		Missile:
			SKEL J 0 A_Jumpif(Cvar.getcvar("DCX_EnchancesMonsters").getint() == 1 , "Missle.Enchanced");
			SKEL J 0 BRIGHT A_FaceTarget;
			SKEL J 10 BRIGHT A_FaceTarget;
			SKEL K 10 A_SkelMissile;
			SKEL K 10 A_FaceTarget;
			Goto See;
		Melee.Enchanced:
			SKEL G 6 A_FaceTarget;
			SKEL G 0 A_SkelWhoosh;
			SKEL H 6 A_FaceTarget;
			SKEL I 6 A_SkelFist;
			Goto See;
		Missle.Enchanced:
			SKEL K 16 A_FaceTarget;
			SKEL J 10 BRIGHT A_SkelMissile;
			SKEL K 10 A_FaceTarget;
			Goto See;
	}
}

class DCX_SpiderMastermind : SpiderMastermind Replaces SpiderMastermind
{
	States
	{
	Missile:
		SPID A 20 A_FaceTarget;
		SPID A 0 A_Jumpif(Cvar.getcvar("DCX_EnchancesMonsters").getint() == 1 , "Missle.Enchanced");
		SPID G 4 BRIGHT A_SPosAttackUseAtkSound;
		SPID H 4 BRIGHT A_SposAttackUseAtkSound;
		SPID H 1 BRIGHT A_SpidRefire;
		Goto Missile+1;
	Missle.Enchanced:
		SPID G 2 BRIGHT A_SPosAttackUseAtkSound;
		SPID H 2 BRIGHT;
		SPID H 1 BRIGHT A_SpidRefire;
		Goto Missile+1;
	Death:
		SPID J 1;
		SPID J 19 A_Scream;
		SPID K 10 A_NoBlocking;
		SPID LMNOPQR 10 Bright;
		SPID S 30;
		SPID S -1 A_BossDeath;
		Stop;
	}
}


class DCX_Cyberdemon : Cyberdemon Replaces Cyberdemon
{
	void A_MetalHoof()
	{
		A_StartSound("cyber/walk", CHAN_BODY, CHANF_DEFAULT, 1, ATTN_IDLE);
		A_Chase();
	}
	
	void A_CyberdemonAttack()
	{
		A_FaceTarget();
		A_SpawnProjectile("Rocket",49,-25,0);
	}
	
	States
	{
	Spawn:
		CYBR AB 10 A_Look;
		Loop;
	See:
		CYBR A 3 A_Hoof;
		CYBR ABBCC 3 A_Chase;
		CYBR D 3 A_MetalHoof();
		CYBR D 3 A_Chase;
		Loop;
	Pain:
		CYBR G 10 A_Pain;
		Goto See;
	Missile:
		CYBR E 6 A_FaceTarget;
		CYBR A 0 A_Jumpif(Cvar.getcvar("DCX_EnchancesMonsters").getint() == 1 , "Missle.Enchanced");
		CYBR F 12 Bright A_CyberAttack;
		CYBR E 12 A_FaceTarget;
		CYBR F 12 Bright A_CyberAttack;
		CYBR E 12 A_FaceTarget;
		CYBR F 12 Bright A_CyberAttack;
		Goto See;
	Missle.Enchanced:
		CYBR F 6 Bright A_CyberdemonAttack();
		CYBR E 18 A_FaceTarget;
		CYBR F 6 Bright A_CyberdemonAttack();
		CYBR E 18 A_FaceTarget;
		CYBR F 6 Bright A_CyberdemonAttack();
		Goto See;
	Death:
		CYBR H 10 Bright;
		CYBR I 10 Bright A_Scream;
		CYBR JKL 10 Bright;
		CYBR M 10 Bright A_NoBlocking;
		CYBR NO 10 Bright;
		CYBR P 30;
		CYBR P -1 A_BossDeath;
		Stop;
	}
}

class DCX_BossEye : BossEye Replaces BossEye
{
	default
	{
		Seesound "brain/sight";
	}
	void A_BrainAwake()
	{
		A_StartSound(self.seesound, CHAN_VOICE, CHANF_DEFAULT, 1, ATTN_NONE);
	}
	States
	{
	Spawn:
		TNT1 A 10 A_Look;
		Loop;
	See:
		TNT1 A 181 A_BrainAwake;
		TNT1 A 150 A_BrainSpit;
		Wait;
	}
}

class DCX_BossBrain : BossBrain replaces BossBrain
{
	default
	{
		PainSound "brain/pain";
		DeathSound "brain/death";
	}
	
	private static void BrainishExplosion(vector3 pos)
	{
		Actor boom = Actor.Spawn("Rocket", pos, NO_REPLACE);
		if (boom)
		{
			boom.DeathSound = "misc/brainexplode";
			boom.Vel.z = random[BrainScream](0, 255)/128.;

			boom.SetStateLabel ("Brainexplode");
			boom.bRocketTrail = false;
			boom.SetDamage(0);	// disables collision detection which is not wanted here
			boom.tics -= random[BrainScream](0, 7);
			if (boom.tics < 1) boom.tics = 1;
		}
	}
	
	void A_BrainScream()
	{
		String mapName = level.MapName.MakeLower();
		
		int Ypos;
		int Zpos;
		int Xpos;
		
		if( (mapName == "tn_map30") && (CVar.FindCVar("dcx_TextureEchancements").GetBool()) )
		{
			Ypos = 623;
		}
		else
		{
			Ypos = -320;
		}
		
		for (double x = -280; x < +280; x += 8)
		{
			BrainishExplosion(Vec2OffsetZ(x, Ypos, (1 / 512.) + random[BrainExplode](0, 255) * 2));
		}
		A_StartSound(self.Deathsound, CHAN_VOICE, CHANF_DEFAULT, 1., ATTN_NONE);
	}

	void A_BrainPain()
	{
		A_StartSound(self.Painsound, CHAN_VOICE, CHANF_DEFAULT, 1, ATTN_NONE);
	}
	
	override void Die(Actor source, Actor inflictor, int dmgflags, Name MeansOfDeath)
	{
		String mapName = level.MapName.MakeLower();
		if( (mapName == "tn_map30") && (CVar.FindCVar("dcx_TextureEchancements").GetBool()) )
		{
			ACS_NamedExecuteAlways("ChangeSkyTexture",0);
		}
		super.Die(source, inflictor, dmgflags, MeansOfDeath);
	}	

	states
	{
		Death:
			BBRN B 100 A_BrainScream();
			BBRN BB 10;
			BBRN B -1 A_BrainDie;
			Stop;
	}
}