
class DCX_Player : Doomplayer Replaces Doomplayer
{
	Default
	{
		+NOMENU
		Player.StartItem "Clip", 50;
		Player.StartItem "DCX_Pistol";
		Player.StartItem "DCX_Fist";
		Player.WeaponSlot 1, "DCX_Fist", "DCX_Chainsaw", "DCX_DoubleBladedChainsaw";
		Player.WeaponSlot 2, "DCX_Pistol";
		Player.WeaponSlot 3, "DCX_Shotgun", "DCX_SuperShotgun";
		Player.WeaponSlot 4, "DCX_Chaingun";
		Player.WeaponSlot 5, "DCX_Rocketlauncher";
		Player.WeaponSlot 6, "DCX_Incinerator", "DCX_PlasmaRifle", "DCX_HeavyPlasmaGun";
		Player.WeaponSlot 7, "DCX_CalamityBlade", "DCX_BFG9000";
		Player.WeaponSlot 8, "DCX_Unmaker";
	}
}

class DCX_Fist : Fist Replaces Fist
{
	States
	{
	Ready:
		TNT1 A 0 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, "Perk_Ready");
		PUNG A 1 A_WeaponReady;
		Loop;
	Deselect:
		TNT1 A 0 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, "Perk_Deselect");
		PUNG A 1 A_Lower;
		Loop;
	Select:
		TNT1 A 0 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, "Perk_Select");
		PUNG A 1 A_Raise;
		Loop;
	Fire:
		TNT1 A 0 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, "Perk_Fire");
		PUNG B 4;
		PUNG C 4 A_Punch;
		PUNG D 5;
		PUNG C 4;
		PUNG B 5 A_ReFire;
		Goto Ready;
			
	//Smooth Moves
	
	Perk_Ready:
		pkfs A 1 A_WeaponReady;
		Goto Ready;	
    Perk_Deselect:
		pkfs A 1 A_Lower;
		Loop;
    Perk_Select:
		pkfs A 1 A_Raise;
		Loop;
	Perk_Fire:
		PKFS LBCD 1;
		PKFS E 2 A_Punch;
		PKFS FGHI 2;
		PKFS JKL 1;
		pkfs A 5 A_ReFire;
		Goto Perk_Ready;
	}
}


class DCX_Chainsaw : Chainsaw Replaces Chainsaw
{
	States
	{
	Ready:
		TNT1 A 0 { A_StopSound(6); A_StopSound(7); A_StopSound(1); }
		TNT1 A 0 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, "Perk_Ready");
		SAWG C 4 { A_startsound("weapons/sawidle", 7, CHANF_DEFAULT, 1.0); A_WeaponReady(); }
		SAWG D 4 A_WeaponReady(); 
		Goto Ready+3;
	Deselect:
		TNT1 A 0 A_StopSound(7);
		TNT1 A 0 A_startsound("weapons/sawidle", 7, CHANF_DEFAULT, 1.0);
		SAWG C 1 A_Lower;
		Goto Deselect+2;
	Select:
		SAWG C 1 A_Raise;
		Loop;
	Fire:
		TNT1 A 0 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, "Perk_Fire");
		TNT1 A 0 A_StopSound(7);
		SAWG AB 4 A_Saw;
		SAWG B 0 A_ReFire;
		Goto Ready;
	Perk_Ready:
		TNT1 A 0 { A_StopSound(6); A_StopSound(7); }
		TNT1 A 0 A_startsound("weapons/sawidle", 7, CHANF_LOOPING, 1.0);
		saws CDEF 2 A_WeaponReady;
		Goto Ready;
		
	Perk_Fire:
		TNT1 A 0 A_startsound("weapons/sawfull", 7, CHANF_LOOPING);
	Perk_Hold:
		saws A 1 offset(0,36) A_Saw("","weapons/sawhit",0);
		saws A 1 offset(-1,34);
		saws B 1 offset(0,35);
		saws B 1 offset(1,33);
		saws A 1 offset(0,36) A_Saw("","weapons/sawhit",0);
		saws A 1 offset(-1,34);
		saws B 1 offset(0,37);
		saws B 1 offset(1,34)   ;
		saws G 2 A_ReFire;
    	Goto Ready;
	}
}

Class DCX_DoubleBladedChainsaw : DoomWeapon
{
	Default
	{
		Weapon.Kickback 0;
		Weapon.SelectionOrder 2200;
		Weapon.UpSound "weapons/saw2up";
		Weapon.ReadySound "weapons/saw2idle";
		//Weapon.Slotnumber 1;
		Inventory.PickupMessage "A UAC Dual chainsaw?  About damn time!";
		Obituary "%o was mowed twice-over by %k's chainsaw.";
		Decal "BulletChip";
		+WEAPON.MELEEWEAPON
	}

	States
	{
		Ready:
			SAW2 CD 4 A_WeaponReady();
			Loop;
		Deselect:
			SAW2 C 1 A_Lower();
		Loop;
		Select:
			SAW2 C 1 A_Raise();
			Loop;
		Fire:
			SAW2 AB 2 A_Saw("weapons/saw2full","weapons/saw2hit");
			SAW2 B 0 A_ReFire();
			Goto Ready;
		Spawn:
			2SAW A -1;
			Stop;
	}
}

class DCX_Pistol : Pistol Replaces Pistol
{
	States
	{
	Ready:
		TNT1 A 0 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, "Perk_Ready");
		PISG A 1 A_WeaponReady;
		Loop;
	Deselect:
		TNT1 A 0 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, "Perk_Deselect");
		PISG A 1 A_Lower;
		Loop;
	Select:
		TNT1 A 0 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, "Perk_Select");
		PISG A 1 A_Raise;
		Loop;
	Fire:
		TNT1 A 0 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, "Perk_Fire");
		PISG A 4;
		PISG B 6 A_FirePistol;
		PISG C 4;
		PISG B 5 A_ReFire;
		Goto Ready;
	Flash:
		TNT1 A 0 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, "Perk_Flash");
		PISF A 7 Bright A_Light1;
		Goto LightDone;
		PISF A 7 Bright A_Light1;
		Goto LightDone;
	
	Perk_Ready:	
		PKPI A 1 A_WeaponReady;
		Goto Ready;		
	Perk_Deselect:
		PKPI A 1 A_Lower;
		Loop;		
	Perk_Select:
		PKPI A 1 A_Raise;
		Loop;		
	Perk_Fire:
		PKPI AB 2;
		PKPI C 2 A_FirePistol;
		PKPI D 1;
		PKPI EF 1;
		PKPI G 3;
		PKPI F 2;
		PKPI B 2 A_ReFire;
		PKPI BAA 1 A_refire;
		Goto Ready;
		
	Perk_Flash:
		PKPF B 2 Bright A_Light2;
		PKPF A 1 Bright A_Light1;
		Goto LightDone;
	}

}

Class DCX_Shotgun : Shotgun Replaces Shotgun
{
	States
	{
	Ready:
		SHTG A 1 A_WeaponReady;
		Loop;
	Deselect:
		SHTG A 1 A_Lower;
		Loop;
	Select:
		SHTG A 1 A_Raise;
		Loop;
	Fire:
		TNT1 A 0 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, "Perk_Fire");
		SHTG A 3;
		SHTG A 7 A_FireShotgun;
		SHTG BC 5;
		SHTG D 4;
		SHTG CB 5;
		SHTG A 3;
		SHTG A 7 A_ReFire;
		Goto Ready;
	Flash:
		TNT1 A 0 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, "Perk_Flash");
		SHTF A 4 Bright A_Light1;
		SHTF B 3 Bright A_Light2;
		Goto LightDone;
	
	Perk_Fire:
		//XTSG A 3 //3 prefire tics
		
		//7 firing tics
		XTSG B 2 A_FireShotgun;
		XTSG CD 2;
		
		//27 tics before refire
		SHTG A 3;
		XTSG F 1;
		XTSG G 1;
		XTSG H 1;
		XTSG I 1;
		SGXT a 4 ;

		XTSG J 3; //highest weapon raise
		XTSG K 1;
		XTSG L 4; //deepest "pump" frame
		

		XTSG M 2;
		XTSG J 2;
		XTSG IH 2;
		XTSG GF 1;
		
		SHTG A 7 A_ReFire;
		Goto Ready;
		
	Perk_Flash:
		XSGF A 2 Bright A_Light2;
		XSGF B 2 Bright A_Light1;
		XSGF C 2 Bright A_Light1;
		Goto LightDone;
	}
}

class DCX_SuperShotgun : SuperShotgun Replaces SuperShotgun
{
	States
	{
	Ready:
		TNT1 A 0 A_JumpIf(Cvar.getcvar("ssgtoggle").getint() == 1, "Ready2");
		TNT1 A 0 A_JumpIf(Cvar.getcvar("ssgtoggle").getint() == 2, "Ready3");
		SHT2 A 1 A_WeaponReady;
		Loop;		
	Ready2:
		S2PX A 1 A_WeaponReady;
		Goto Ready;	
	Ready3:
		S2HB A 1 A_WeaponReady;
		Goto Ready;	
		
		
	Deselect:
		TNT1 A 0 A_JumpIf(Cvar.getcvar("ssgtoggle").getint() == 1, "Deselect2");
		TNT1 A 0 A_JumpIf(Cvar.getcvar("ssgtoggle").getint() == 2, "Deselect3");
		SHT2 A 1 A_Lower;
		Loop;
	Deselect2:
		S2PX A 1 A_Lower;
		Loop;		
	Deselect3:
		S2HB A 1 A_Lower;
		Loop;
		
		
	Select:
		TNT1 A 0 A_JumpIf(Cvar.getcvar("ssgtoggle").getint() == 1, "select2");
		TNT1 A 0 A_JumpIf(Cvar.getcvar("ssgtoggle").getint() == 2, "select3");
		SHT2 A 1 A_Raise;
		Loop;
	Select2:
		S2PX A 1 A_Raise;
		Loop;
	Select3:
		S2HB A 1 A_Raise;
		Loop;
		
		
	Fire:
		TNT1 A 0 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, "Perk_Fire");
		TNT1 A 0 A_JumpIf(Cvar.getcvar("ssgtoggle").getint() == 1, "fire2");
		TNT1 A 0 A_JumpIf(Cvar.getcvar("ssgtoggle").getint() == 2, "fire3");
		SHT2 A 3;
		SHT2 A 7 A_FireShotgun2;
		Goto Reload;
	Fire2:
		S2PX A 3;
		S2PX A 7 A_FireShotgun2;
		Goto Reload;
	Fire3:
		S2HB A 3;
		S2HB A 7 A_FireShotgun2;
		Goto Reload;
	Reload:
		SHT2 B 7;
		SHT2 C 7 A_CheckReload;
		SHT2 D 7 A_OpenShotgun2;
		SHT2 E 7;
		SHT2 F 7 A_LoadShotgun2;
		SHT2 G 6;
		SHT2 H 6 A_CloseShotgun2;
		Goto Refirecheck;
	Refirecheck:
		TNT1 A 0 A_JumpIf(Cvar.getcvar("ssgtoggle").getint() == 1, "Refire2");
		TNT1 A 0 A_JumpIf(Cvar.getcvar("ssgtoggle").getint() == 2, "Refire3");
		Goto Refire1;
		
		
	Refire1:
		SHT2 A 5 A_ReFire;
		Goto ready;
	Refire2:
		S2PX A 5 A_ReFire;
		Goto ready2;
	Refire3:
		S2HB A 5 A_ReFire;
		Goto ready3;
		
		
	Flash:
		TNT1 A 0 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, "Perk_Flash");
		TNT1 A 0 A_JumpIf(Cvar.getcvar("ssgtoggle").getint() == 1, "Flash2");
		TNT1 A 0 A_JumpIf(Cvar.getcvar("ssgtoggle").getint() == 2, "Flash3");
		SHT2 I 4 Bright A_Light1;
		SHT2 J 3 Bright A_Light2;
		Goto LightDone;	
	Flash2:
		S2PX B 4 Bright A_Light1;
		S2PX C 3 Bright A_Light2;
		Goto LightDone;	
	Flash3:
		S2HB B 4 Bright A_Light1;
		S2HB C 3 Bright A_Light2;
		Goto LightDone;
	
	
	Perk_Fire:
			TNT1 A 0 A_JumpIf(Cvar.getcvar("ssgtoggle").getint() == 1, "Perk_Fire_Psx");
			TNT1 A 0 A_JumpIf(Cvar.getcvar("ssgtoggle").getint() == 2, "Perk_Fire_Hybrid");
			
			OGS2 A 3 A_Startsound("weapons/ssg/fire",0);
			OGS2 B 2 bright offset(0,36)
			{	
				A_FireBullets (11.2, 7.1, 20, 5);
				a_gunflash();
				A_Startsound ("weapons/sshotf", CHAN_WEAPON);
			}
			OGS2 C 2 bright; 
			OGS2 D 3 bright; 
			OGS2 A 1 
			{
					a_zoomfactor(1.0, ZOOM_NOSCALETURNING);
					A_Checkreload();
			}
			OGS2 A 1;
			XTS2 U 1;
			goto Perk_Fire_Continue;
			
	Perk_Fire_Continue:
			S2XT E 1;
			XTS2 BCDEEE 2;
			XTS2 F 1;
			S2XT C 1 A_Startsound ("weapons/sshoto", 7);
			XTS2 G 1;
			XTS2 HIJ 2;
			XTS2 K 4;
			XTS2 L 1; 
			S2XT D 1 A_Startsound("weapons/sshotl", 7);
			XTS2 M 2; 
			XTS2 NO 2;
			XTS2 P 1; 
			S2XT a 2;
			XTS2 Q 1;
			XTS2 R 2 offset(0,33) A_CloseShotgun2;
			XTS2 S 2 a_refire;
	Perk_Fire_end:
			TNT1 A 0 A_JumpIf(Cvar.getcvar("ssgtoggle").getint() == 1, "Perk_Fire_End_Psx");
			TNT1 A 0 A_JumpIf(Cvar.getcvar("ssgtoggle").getint() == 2, "Perk_Fire_End_Hybrid");
			OGS2 A 2 a_refire;
			OGS2 A 7 a_refire;
			Goto Ready;
	Perk_Fire_End_Psx:
			S2PX A 2 a_refire;
			S2PX A 7 a_refire;
			Goto Ready;
	Perk_Fire_End_Hybrid:
			S2HB A 2 a_refire;
			S2HB A 7 a_refire;
			Goto Ready;
	
	Perk_Fire_Psx:
			S2PX A 3 A_Startsound("weapons/ssg/fire",0);
			PXS2 B 2 bright offset(0,36)
			{	
				A_FireBullets (11.2, 7.1, 20, 5);
				a_gunflash();
				A_Startsound ("weapons/sshotf", CHAN_WEAPON);
			}
			PXS2 C 2 bright;
			PXS2 D 3 bright; 
			S2PX A 1 
			{
				a_zoomfactor(1.0, ZOOM_NOSCALETURNING);
				A_Checkreload();
			}
			S2PX A 1;
			XTS2 U 1;
			goto Perk_Fire_Continue;
			
	Perk_Fire_Hybrid:
			S2HB A 3 A_Startsound("weapons/ssg/fire",0);
			XTS2 W 2 bright offset(0,36)
			{	
				A_FireBullets (11.2, 7.1, 20, 5);
				A_gunflash();
				A_Startsound ("weapons/sshotf", CHAN_WEAPON);
			}
			XTS2 X 2 bright; 
			XTS2 Y 3 bright; 
			S2HB A 1 
				{
				a_zoomfactor(1.0, ZOOM_NOSCALETURNING);
				A_Checkreload();
				}
			S2HB A 1;
			XTS2 U 1;
			goto Perk_Fire_Continue;
	
	Perk_Flash:
			TNT1 A 2 Bright A_Light2;
			TNT1 A 2 Bright A_Light1;
			Goto LightDone;
	}
}

Class DCX_Chaingun : Chaingun Replaces Chaingun
{
	States
	{
		Ready:
			TNT1 A 0 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, "Perk_Ready");
			CHGG A 1 A_WeaponReady;
			Loop;
		Deselect:
			TNT1 A 0 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, "Perk_Deselect");
			CHGG A 1 A_Lower;
			Loop;
		Select:
			TNT1 A 0 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, "Perk_Select");
			CHGG A 1 A_Raise;
			Loop;
		Fire:
			TNT1 A 0 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, "Perk_Fire");
			CHGG AB 4 A_FireCGun;
			CHGG B 0 A_ReFire;
			Goto Ready;
		Flash:
			CHGF A 5 Bright A_Light1;
			Goto LightDone;
			CHGF B 5 Bright A_Light2;
			Goto LightDone;
			
		Perk_Ready:
			PKCG A 1 A_WeaponReady;
			Goto Ready;
		Perk_Deselect:
			PKCG A 1 A_Lower;
			Loop;
		Perk_Select:
			PKCG A 1 A_Raise;
			Loop;
		Perk_Fire:
			PKCG A 1 offset(0,38)
			{
				A_Startsound("weapons/chngun", CHAN_WEAPON);
				A_GunFlash("Perk_Flash");
				A_FireBullets(5.6, 0, 1, 5, "BulletPuff");
			}	
			PKCG BCD 1;
			PKCG A 1
			{
				A_Startsound("weapons/chngun", CHAN_WEAPON);
				A_GunFlash("Perk_Flash2");
				A_FireBullets(5.6, 0, 1, 5, "BulletPuff");
			}	
			PKCG BCD 1;
			PKCG A 1 
			{
				A_Weaponready();
				A_ReFire();
			}
			PKCG BB 1 
			{
				A_Weaponready();
			}
			PKCG CD 3 a_weaponready;
			Goto Ready;


		Perk_Flash:	
			PKCF A 1 Bright A_Light2;
			PKCF B 1 Bright A_Light1;
			TNT1 A 2 A_Light0;
			Goto LightDone;
	
		Perk_Flash2:
			PKCF C 1 Bright A_Light2;
			PKCF D 1 Bright A_Light1;
			TNT1 A 2 A_Light0;
			Goto LightDone;
	
	}
}

class DCX_RocketLauncher : RocketLauncher Replaces RocketLauncher
{
	States
	{
		Ready:
			TNT1 A 0 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, "Perk_Ready");
			MISG A 1 A_WeaponReady;
			Loop;
		Deselect:
			TNT1 A 0 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, "Perk_Deselect");
			MISG A 1 A_Lower;
			Loop;
		Select:
			TNT1 A 0 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, "Perk_Select");
			MISG A 1 A_Raise;
			Loop;
		Fire:
			TNT1 A 0 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, "Perk_Fire");
			MISG B 8 A_GunFlash;
			MISG B 12 A_FireMissile;
			MISG B 0 A_ReFire;
			Goto Ready;
		Flash:
			MISF A 3 Bright A_Light1;
			MISF B 4 Bright;
			MISF CD 4 Bright A_Light2;
			Goto LightDone;
			
		Perk_Ready:
			PKRL A 1 A_WeaponReady;
			Goto Ready;
		Perk_Deselect:
			PKRL A 1 A_Lower;
			Loop;
		Perk_Select:
			PKRL A 1 A_Raise;
			Loop;
		Perk_Fire:	
			PKRL A 2;
			PKRL A 4 A_GunFlash("Perk_Flash");
			PKRL B 2;
			PKRL D 3 A_FireMissile;
			PKRL C 3;
			PKRL BE 2;
			PKRL FG 1;
			PKRL A 0 A_ReFire;
			Goto Ready;		
		Perk_Flash:
			PKRF A 3 Bright A_Light1;
			PKRF B 2 Bright;
			PKRF C 2 Bright A_Light2;
			PKRF DE 3 Bright;
			Goto LightDone;
	}
}


class DCX_PlasmaRifle : PlasmaRifle Replaces PlasmaRifle
{
	action void A_FirePlasmaSmooth()
	{
		if (player == null)
		{
			return;
		}
		Weapon weap = player.ReadyWeapon;
		if (weap != null && invoker == weap && stateinfo != null && stateinfo.mStateType == STATE_Psprite)
		{
			if (!weap.DepleteAmmo (weap.bAltFire, true, 1))
				return;
		}
		
		SpawnPlayerMissile ("PlasmaBall");
	}
	
	States
	{
	Ready:
		TNT1 A 0 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, "Perk_Ready");
		PLSG A 1 A_WeaponReady;
		Loop;
	Deselect:
		TNT1 A 0 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, "Perk_Deselect");
		PLSG A 1 A_Lower;
		Loop;
	Select:
		TNT1 A 0 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, "Perk_Select");
		PLSG A 1 A_Raise;
		Loop;
	Fire:
		TNT1 A 0 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, "Perk_Fire");
		PLSG A 3 A_FirePlasma;
		PLSG B 20 A_ReFire;
		Goto Ready;
		
	Perk_Ready:	
		PKPG A 1 A_WeaponReady;
		Goto Ready;
	Perk_Deselect:
		PKPG A 1 A_Lower;
		Loop;
	Perk_Select:
		PKPG A 1 A_Raise;
		Loop;
		
	Perk_Fire:
		PLAS B 1 Bright A_FirePlasmaSmooth();
		PLAS C 1 Bright;
		PLAS D 1 Bright;
		TNT1 A 0 A_ReFire(+1);
			goto Perk_Cooldown;
		PLAS B 1 Bright A_FirePlasmaSmooth();
		PLAS C 1 Bright;
		PLAS E 1 Bright;
		PLAS a 0 a_refire(+1);
			goto Perk_Cooldown;
		PLAS B 1 Bright A_FirePlasmaSmooth();
		PLAS C 1 Bright;
		PLAS D 1 Bright;
		PLAS a 0 a_refire("Perk_Fire");
			goto Perk_Cooldown;
	
	Perk_Cooldown:
		PKPL a 1 Bright a_zoomfactor(1.0, ZOOM_NOSCALETURNING);
		PKPL bbccde 1;
		PKPL e 6;
		PKPL EEDC 2;
		PKPL B 1;
		PKPL A 1;
		Goto Ready;
			
	Flash:
		//TNT1 A 0 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, "Perk_Flash");
		PLSF A 4 Bright A_Light1;
		Goto LightDone;
		//TNT1 A 0 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, "Perk_Flash");
		PLSF B 4 Bright A_Light1;
		Goto LightDone;
	Perk_Flash:
		TNT1 A 4 Bright A_Light1;
		Goto LightDone;
	}
}

class DCX_HeavyPlasmaGun : DoomWeapon
{
	Default
	{
		Weapon.SelectionOrder 10;
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 40;
		//Weapon.Slotnumber 6;
		Weapon.AmmoType "Cell";
		Inventory.PickupMessage "You Got The Heavy Duty PlasmaGun";
		Tag "Heavy PlasmaGun";
	}
		
	States
	{
	Ready:
		PLS2 A 0 A_WeaponReady;
	ReadyLoop:
		PLS2 A 0 A_Startsound("PlasmaMKII/Hum", CHAN_WEAPON, CHANF_LOOPING, 0.5, ATTN_NORM);
		PLS2 AB 3 Bright A_WeaponReady;
		Loop;
	Deselect:
		PLS2 A 0 A_Stopsound(CHAN_WEAPON);
		PLS2 C 1 A_Lower;
		Loop;
	Select:
		PLS2 A 0 A_Stopsound(CHAN_WEAPON);
		PLS2 C 1 A_Raise;
		Loop;
	Fire:
		RAIL A 0 A_Stopsound(CHAN_WEAPON);
		PL2F A 2 Bright A_FireProjectile("DCX_PlasmaBall2",0,1);
		PL2F B 2 Bright;
		PL2F A 0 Bright A_ReFire;
		Goto Ready;
	Flash:
		Stop;
	Spawn:
		PLA2 A -1;
		Stop;
	}
}

class DCX_PlasmaBall2 : PlasmaBall
{
	Default
	{
		SeeSound "baby/attack2";
		deathsound "baby/shotx2";
	}
		States
	{
	Spawn:
		PLB2 AB 6 Bright;
		Loop;
	Death:
		PLB2 CDEF 4 Bright;
		Stop;
	}
}

class DCX_BFG9000 : BFG9000 Replaces BFG9000
{
	States
	{
		Ready:
			TNT1 A 0 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, "Perk_Ready");
			BFGG A 1 A_WeaponReady;
			Loop;
		Deselect:
			TNT1 A 0 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, "Perk_Delect");
			BFGG A 1 A_Lower;
			Loop;
		Select:
			TNT1 A 0 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, "Perk_Select");
			BFGG A 1 A_Raise;
			Loop;
		Fire:
			TNT1 A 0 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, "Perk_Fire");
			BFGG A 20 A_BFGsound;
			BFGG B 10 A_GunFlash;
			BFGG B 10 A_FireBFG;
			BFGG B 20 A_ReFire;
			Goto Ready;
		Flash:
			BFGF A 11 Bright A_Light1;
			BFGF B 6 Bright A_Light2;
			Goto LightDone;
		OldFire:
			BFGG A 10 A_BFGsound;
			BFGG BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB 1 A_FireOldBFG;
			BFGG B 0 A_Light0;
			BFGG B 20 A_ReFire;
			Goto Ready;

		Perk_Ready:
			BFGP A 1 A_WeaponReady;
			Goto Ready;
		Perk_Deselect:
			BFGP A 1 A_Lower;
			Loop;
		Perk_Select:
			BFGP A 1 A_Raise;
			Loop;
		
		Perk_Fire: 
			BFGP J 4 A_BFGSound;
			BFGP AJAJ 3;
			BFGP AJ 2;
			BFGP KB 1 bright;
			BFGP C 1 bright A_GunFlash("Perk_Flash");
			BFGx A 1 bright;
			BFGP DEF 2 bright;
			BFGP G 2 bright A_FireBFG;
			tnt1 a 0 a_refire;

			BFGP H 1 bright offset (0, 37);
			BFGP H 1 bright offset (0, 37);
			BFGP I 1 bright offset (0, 35);
			BFGP I 1 bright offset (0, 35);
			BFGP I 1 bright offset (0, 35);
			BFGP J 3 offset (0, 34);
			BFGP J 2 A_ReFire;	
			BFGP A 3 offset (0, 33);
			BFGP A 15;
			goto Ready;

		Perk_Flash:
			TNT1 A 2 bright;
			TNT1 HGFE 1 bright A_Light2;
			TNT1 DCBA 1 bright A_Light2;
			TNT1 A 0 A_Light0;
			Goto LightDone;
		
	}
}

class DCX_Incinerator : ID24Incinerator Replaces ID24Incinerator
{	
	States
	{
		Spawn:
			INCN A 1 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, 1);
			Loop;
			PINC A 1;
			Goto Spawn;
		Ready:
			TNT1 A 0 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, "Perk_Ready");
			FLMG A 1 A_WeaponReady;
			Loop;
		Deselect:
			TNT1 A 0 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, "Perk_Deselect");
			FLMG A 1 A_Lower;
			Loop;
		Select:
			TNT1 A 0 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, "Perk_Select");
			FLMG A 1 A_Raise;
			Loop;
		Fire:
			TNT1 A 0 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, "Perk_Fire");
			FLMF A 0 BRIGHT A_Jump(128, "FireAltSound");
			FLMF A 0 BRIGHT A_StartSound("weapons/incinerator/fire1", CHAN_WEAPON);
			Goto DoFire;
		FireAltSound:
			FLMF A 0 BRIGHT A_StartSound("weapons/incinerator/fire2", CHAN_WEAPON);
			TNT1 A 0 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, "Perk_DoFire");
			Goto DoFire;
		DoFire:
			FLMF A 0 BRIGHT A_GunFlash;
			FLMF A 0 BRIGHT MBF21_ConsumeAmmo(1);
			FLMF A 1 BRIGHT MBF21_WeaponProjectile("ID24IncineratorFlame", 0, 0, 0, 0);
			FLMF B 1 BRIGHT;
			FLMG A 1;
			FLMG A 0 A_ReFire;
			Goto Ready;
		Flash:
			TNT1 A 2 A_Light2;
			TNT1 A 1 A_Light1;
			Goto LightDone;
		
		
		Perk_Ready:
			PFLG DE 4 Bright A_WeaponReady;
			Goto Ready;
		Perk_Deselect:
			PFLG A 1 A_Lower;
			Loop;
		Perk_Select:
			PFLG A 1 A_Raise;
			Loop;
		Perk_Fire:
			PFLF A 0 BRIGHT A_Jump(128, "FireAltSound");
			PFLF A 0 BRIGHT A_StartSound("weapons/incinerator/fire1", CHAN_WEAPON);
			Goto Perk_DoFire;
		Perk_DoFire:
			PFLF A 0 BRIGHT A_GunFlash;
			PFLF A 0 BRIGHT MBF21_ConsumeAmmo(1);
			PFLF A 1 BRIGHT MBF21_WeaponProjectile("ID24IncineratorFlame", 0, 0, 0, 0);
			PFLF B 1 BRIGHT;
			PFLG A 1;
			PFLG A 0 A_ReFire("Perk_DoFire2");
			Goto Ready;
		Perk_DoFire2:
			PFLF A 0 BRIGHT A_GunFlash;
			PFLF A 0 BRIGHT MBF21_ConsumeAmmo(1);
			PFLF C 1 BRIGHT MBF21_WeaponProjectile("ID24IncineratorFlame", 0, 0, 0, 0);
			PFLF D 1 BRIGHT;
			PFLG A 1;
			PFLG A 0 A_ReFire("Perk_DoFire");
			Goto Ready;
	}
}

class DCX_CalamityBlade : ID24CalamityBlade Replaces ID24CalamityBlade
{
	States
	{
	Spawn:
		CBLD A 1 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, 1);
		Loop;
		PCBL A 1;
		Goto Spawn;
		
	Ready:
		TNT1 A 0 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, "Perk_Ready");
		HETG A 1 A_WeaponReady;
		Loop;
	Deselect:
		TNT1 A 0 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, "Perk_Deselect");
		HETG A 1 A_Lower;
		Loop;
	Select:
		TNT1 A 0 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, "Perk_Select");
		HETG A 1 A_Raise;
		Loop;
	Fire:
		TNT1 A 0 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, "Perk_Hold0");
	Hold0:
		HETG A 0 MBF21_ConsumeAmmo(0);
		HETG A 0 A_GunFlashTo("Hold0Flash", 1);
		HETG A 20 A_StartSound("weapons/calamityblade/charge", CHAN_WEAPON);
		HETG A 0 A_CheckAmmo("Hold0FireProjectiles", 0);
		HETG A 0 A_RefireTo("Hold1", 0);
		Goto Hold0FireProjectiles;
	Hold1:
		HETG A 0 MBF21_ConsumeAmmo(0);
		HETG A 0 A_GunFlashTo("Hold1Flash", 1);
		HETG A 20 A_StartSound("weapons/calamityblade/charge", CHAN_WEAPON);
		HETG A 0 A_CheckAmmo("Hold1FireProjectiles", 0);
		HETG A 0 A_RefireTo("Hold2", 0);
		Goto Hold1FireProjectiles;
	Hold2:
		HETG A 0 MBF21_ConsumeAmmo(0);
		HETG A 0 A_GunFlashTo("Hold2Flash", 1);
		HETG A 20 A_StartSound("weapons/calamityblade/charge", CHAN_WEAPON);
		HETG A 0 A_CheckAmmo("Hold2FireProjectiles", 0);
		HETG A 0 A_RefireTo("Hold3", 0);
		Goto Hold2FireProjectiles;
	Hold3:
		HETG A 0 MBF21_ConsumeAmmo(0);
		HETG A 0 A_GunFlashTo("Hold3Flash", 1);
		HETG A 20 A_StartSound("weapons/calamityblade/charge", CHAN_WEAPON);
		HETG A 0 A_CheckAmmo("Hold3FireProjectiles", 0);
		HETG A 0 A_RefireTo("Hold4", 0);
		Goto Hold3FireProjectiles;
	Hold4:
		HETG A 0 MBF21_ConsumeAmmo(0);
		HETG A 0 A_GunFlashTo("Hold4Flash", 1);
		HETG A 20 A_StartSound("weapons/calamityblade/charge", CHAN_WEAPON);
		Goto Hold4FireProjectiles;
	Hold4FireProjectiles:
		HETF A 0 BRIGHT MBF21_WeaponProjectile("ID24IncineratorProjectile", -35, 0, 0, 0);
		HETF A 0 BRIGHT MBF21_WeaponProjectile("ID24IncineratorProjectile", -30, 0, 0, 0);
		HETF A 0 BRIGHT MBF21_WeaponProjectile("ID24IncineratorProjectile", -25, 0, 0, 0);
		HETF A 0 BRIGHT MBF21_WeaponProjectile("ID24IncineratorProjectile", -20, 0, 0, 0);
		HETF A 0 BRIGHT MBF21_WeaponProjectile("ID24IncineratorProjectile", -15, 0, 0, 0);
		HETF A 0 BRIGHT MBF21_WeaponProjectile("ID24IncineratorProjectile", -10, 0, 0, 0);
		HETF A 0 BRIGHT MBF21_WeaponProjectile("ID24IncineratorProjectile", -5, 0, 0, 0);
		HETF A 0 BRIGHT MBF21_WeaponProjectile("ID24IncineratorProjectile", 0, 0, 0, 0);
		HETF A 0 BRIGHT MBF21_WeaponProjectile("ID24IncineratorProjectile", 5, 0, 0, 0);
		HETF A 0 BRIGHT MBF21_WeaponProjectile("ID24IncineratorProjectile", 10, 0, 0, 0);
		HETF A 0 BRIGHT MBF21_WeaponProjectile("ID24IncineratorProjectile", 15, 0, 0, 0);
		HETF A 0 BRIGHT MBF21_WeaponProjectile("ID24IncineratorProjectile", 20, 0, 0, 0);
		HETF A 0 BRIGHT MBF21_WeaponProjectile("ID24IncineratorProjectile", 25, 0, 0, 0);
		HETF A 0 BRIGHT MBF21_WeaponProjectile("ID24IncineratorProjectile", 30, 0, 0, 0);
		HETF A 0 BRIGHT MBF21_WeaponProjectile("ID24IncineratorProjectile", 35, 0, 0, 0);
		
		TNT1 A 0 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, "Perk_FireAnim");
		Goto FireAnim;
	Hold3FireProjectiles:
		HETF A 0 BRIGHT MBF21_WeaponProjectile("ID24IncineratorProjectile", -27.5, 0, 0, 0);
		HETF A 0 BRIGHT MBF21_WeaponProjectile("ID24IncineratorProjectile", -22.5, 0, 0, 0);
		HETF A 0 BRIGHT MBF21_WeaponProjectile("ID24IncineratorProjectile", -17.5, 0, 0, 0);
		HETF A 0 BRIGHT MBF21_WeaponProjectile("ID24IncineratorProjectile", -12.5, 0, 0, 0);
		HETF A 0 BRIGHT MBF21_WeaponProjectile("ID24IncineratorProjectile", -7.5, 0, 0, 0);
		HETF A 0 BRIGHT MBF21_WeaponProjectile("ID24IncineratorProjectile", -2.5, 0, 0, 0);
		HETF A 0 BRIGHT MBF21_WeaponProjectile("ID24IncineratorProjectile", 2.5, 0, 0, 0);
		HETF A 0 BRIGHT MBF21_WeaponProjectile("ID24IncineratorProjectile", 7.5, 0, 0, 0);
		HETF A 0 BRIGHT MBF21_WeaponProjectile("ID24IncineratorProjectile", 12.5, 0, 0, 0);
		HETF A 0 BRIGHT MBF21_WeaponProjectile("ID24IncineratorProjectile", 17.5, 0, 0, 0);
		HETF A 0 BRIGHT MBF21_WeaponProjectile("ID24IncineratorProjectile", 22.5, 0, 0, 0);
		HETF A 0 BRIGHT MBF21_WeaponProjectile("ID24IncineratorProjectile", 27.5, 0, 0, 0);
		
		TNT1 A 0 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, "Perk_FireAnim");
		Goto FireAnim;
	Hold2FireProjectiles:
		HETF A 0 BRIGHT MBF21_WeaponProjectile("ID24IncineratorProjectile", -20, 0, 0, 0);
		HETF A 0 BRIGHT MBF21_WeaponProjectile("ID24IncineratorProjectile", -15, 0, 0, 0);
		HETF A 0 BRIGHT MBF21_WeaponProjectile("ID24IncineratorProjectile", -10, 0, 0, 0);
		HETF A 0 BRIGHT MBF21_WeaponProjectile("ID24IncineratorProjectile", -5, 0, 0, 0);
		HETF A 0 BRIGHT MBF21_WeaponProjectile("ID24IncineratorProjectile", 0, 0, 0, 0);
		HETF A 0 BRIGHT MBF21_WeaponProjectile("ID24IncineratorProjectile", 5, 0, 0, 0);
		HETF A 0 BRIGHT MBF21_WeaponProjectile("ID24IncineratorProjectile", 10, 0, 0, 0);
		HETF A 0 BRIGHT MBF21_WeaponProjectile("ID24IncineratorProjectile", 15, 0, 0, 0);
		HETF A 0 BRIGHT MBF21_WeaponProjectile("ID24IncineratorProjectile", 20, 0, 0, 0);
		
		TNT1 A 0 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, "Perk_FireAnim");
		Goto FireAnim;
	Hold1FireProjectiles:
		HETF A 0 BRIGHT MBF21_WeaponProjectile("ID24IncineratorProjectile", -12.5, 0, 0, 0);
		HETF A 0 BRIGHT MBF21_WeaponProjectile("ID24IncineratorProjectile", -7.5, 0, 0, 0);
		HETF A 0 BRIGHT MBF21_WeaponProjectile("ID24IncineratorProjectile", -2.5, 0, 0, 0);
		HETF A 0 BRIGHT MBF21_WeaponProjectile("ID24IncineratorProjectile", 2.5, 0, 0, 0);
		HETF A 0 BRIGHT MBF21_WeaponProjectile("ID24IncineratorProjectile", 7.5, 0, 0, 0);
		HETF A 0 BRIGHT MBF21_WeaponProjectile("ID24IncineratorProjectile", 12.5, 0, 0, 0);
		
		TNT1 A 0 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, "Perk_FireAnim");
		Goto FireAnim;
	Hold0FireProjectiles:
		HETF A 0 BRIGHT MBF21_WeaponProjectile("ID24IncineratorProjectile", -5, 0, 0, 0);
		HETF A 0 BRIGHT MBF21_WeaponProjectile("ID24IncineratorProjectile", 0, 0, 0, 0);
		HETF A 0 BRIGHT MBF21_WeaponProjectile("ID24IncineratorProjectile", 5, 0, 0, 0);
		
		TNT1 A 0 A_JumpIf(Cvar.getcvar("DCX_SmoothToggle").getint() == 1, "Perk_FireAnim");
		Goto FireAnim;
	FireAnim:
		HETF A 0 BRIGHT A_StartSound("weapons/calamityblade/shoot", CHAN_WEAPON);
		HETF A 3 BRIGHT A_GunFlash;
		HETF B 5 BRIGHT;
		HETG D 4;
		HETG C 4;
		HETG B 4;
		HETG A 0 A_ReFire;
		Goto Ready;
	Hold0Flash:
		HETC A 6 BRIGHT;
		HETC BCD 5 BRIGHT;
		Goto LightDone;
	Hold1Flash:
		HETC E 6 BRIGHT;
		HETC FGH 5 BRIGHT;
		Goto LightDone;
	Hold2Flash:
		HETC I 6 BRIGHT;
		HETC JKL 5 BRIGHT;
		Goto LightDone;
	Hold3Flash:
		HETC M 6 BRIGHT;
		HETC NOP 5 BRIGHT;
		Goto LightDone;
	Hold4Flash:
		HETC Q 6 BRIGHT;
		HETC RST 5 BRIGHT;
		Goto LightDone;
	Flash:
		TNT1 A 3 A_Light1;
		TNT1 A 5 A_Light2;
		Goto LightDone;
	
	
	Perk_Spawn:
		CBLD A -1;
		Stop;
	Perk_Ready:
		PHTG A 1 A_WeaponReady;
		Goto Ready;
	Perk_Deselect:
		PHTG A 1 A_Lower;
		Loop;
	Perk_Select:
		PHTG A 1 A_Raise;
		Loop;
	Perk_Hold0:
		PHTG A 0 MBF21_ConsumeAmmo(0);
		PHTG A 0 A_GunFlashTo("Perk_Hold0Flash", 1);
		PHTG A 20 A_StartSound("weapons/calamityblade/charge", CHAN_WEAPON);
		PHTG A 0 A_CheckAmmo("Hold0FireProjectiles", 0);
		PHTG A 0 A_RefireTo("Perk_Hold1", 0);
		Goto Hold0FireProjectiles;
	Perk_Hold1:
		PHTG A 0 MBF21_ConsumeAmmo(0);
		PHTG A 0 A_GunFlashTo("Perk_Hold1Flash", 1);
		PHTG A 20 A_StartSound("weapons/calamityblade/charge", CHAN_WEAPON);
		PHTG A 0 A_CheckAmmo("Hold1FireProjectiles", 0);
		PHTG A 0 A_RefireTo("Perk_Hold2", 0);
		Goto Hold1FireProjectiles;
	Perk_Hold2:
		PHTG A 0 MBF21_ConsumeAmmo(0);
		PHTG A 0 A_GunFlashTo("Perk_Hold2Flash", 1);
		PHTG A 20 A_StartSound("weapons/calamityblade/charge", CHAN_WEAPON);
		PHTG A 0 A_CheckAmmo("Hold2FireProjectiles", 0);
		PHTG A 0 A_RefireTo("Perk_Hold3", 0);
		Goto Hold2FireProjectiles;
	Perk_Hold3:
		PHTG A 0 MBF21_ConsumeAmmo(0);
		PHTG A 0 A_GunFlashTo("Perk_Hold3Flash", 1);
		PHTG A 20 A_StartSound("weapons/calamityblade/charge", CHAN_WEAPON);
		PHTG A 0 A_CheckAmmo("Hold3FireProjectiles", 0);
		PHTG A 0 A_RefireTo("Perk_Hold4", 0);
		Goto Hold3FireProjectiles;
	Perk_Hold4:
		PHTG A 0 MBF21_ConsumeAmmo(0);
		PHTG A 0 A_GunFlashTo("Perk_Hold4Flash", 1);
		PHTG A 20 A_StartSound("weapons/calamityblade/charge", CHAN_WEAPON);
		Goto Hold4FireProjectiles;
	Perk_FireAnim:
		PHTF A 0 BRIGHT A_StartSound("weapons/calamityblade/shoot", CHAN_WEAPON);
		PHTF A 3 BRIGHT A_GunFlash;
		PHTF B 4 BRIGHT;
		PHTG E 3 BRIGHT;
		PHTG D 4;
		PHTG C 3;
		PHTG B 3;
		PHTG A 0 A_ReFire;
		Goto Ready;
	Perk_Hold0Flash:
		PHTC A 6 BRIGHT;
		PHTC BCD 5 BRIGHT;
		Goto LightDone;
	Perk_Hold1Flash:
		PHTC E 6 BRIGHT;
		PHTC FGH 5 BRIGHT;
		Goto LightDone;
	Perk_Hold2Flash:
		PHTC I 6 BRIGHT;
		PHTC JKL 5 BRIGHT;
		Goto LightDone;
	Perk_Hold3Flash:
		PHTC M 6 BRIGHT;
		PHTC NOP 5 BRIGHT;
		Goto LightDone;
	Perk_Hold4Flash:
		PHTC Q 6 BRIGHT;
		PHTC RST 5 BRIGHT;
		Goto LightDone;
	Perk_Flash:
		TNT1 A 3 A_Light1;
		TNT1 A 5 A_Light2;
		Goto LightDone;
	}
}

Class DCX_Demonkeycount : Inventory 
{
	Default
	{
		Inventory.MaxAmount 3;
	}
}

class DCX_Unmaker : DoomWeapon
{
	Actor pufftarget;
	
	Default
	{
		Height 20;
		Weapon.SelectionOrder 3000;
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 50;
		+WEAPON.BFG;
		Weapon.AmmoType "Cell";
		Inventory.PickupMessage "What the a@&*% is this?!";
		Obituary "%o wad pulverised by an unkown source";
		Tag "The Unmaker";
	}
	
	States
	{
		Ready:
			LASR A 1 A_WeaponReady;
			Loop;
		Deselect:
			LASR A 1 A_Lower;
			Loop;
		Select:
			LASR A 1 A_Raise;
			Loop;
		Fire:
            LASR A 8 A_FireLaser;
            LASR A 3 A_Refire;
            Goto Ready;
        FireUpgrade1:
            LASR A 5 A_FireLaser;
            LASR A 3 A_Refire;
            Goto Ready;
        FireUpgrade2:
            LASR A 4
            {
                A_FireLaser(0.966797, "");
                A_FireLaser(358.989258);
            }
            LASR A 3 A_Refire;
            Goto Ready;
        FireUpgrade3:
            LASR A 4
            {
                A_FireLaser(2.988281, "");
		        A_FireLaser();
		        A_FireLaser(-2.988281, "");
            }
			LASR A 3 A_ReFire("HoldUpgrade31");
            Goto Ready;

        HoldUpgrade31:
            LASR A 4
            {
                A_FireLaser(5.976563, "");
		        A_FireLaser();
		        A_FireLaser(-5.976563, "");
            }
			LASR A 3 A_ReFire("HoldUpgrade32");
			Goto Ready;
        HoldUpgrade32:
            LASR A 4
            {
                A_FireLaser(8.964844, "");
		        A_FireLaser();
		        A_FireLaser(-8.964844, "");
            }
			LASR A 3 A_ReFire("HoldUpgrade33");
			Goto Ready;
        HoldUpgrade33:
            LASR A 4
            {
                A_FireLaser(11.997070, "");
		        A_FireLaser();
		        A_FireLaser(-11.997070, "");
            }
			LASR A 3 A_ReFire("FireUpgrade3");
			Goto Ready;
		Flash:
			LASR CD 2 Bright A_Light1;
			Goto LightDone;
		Spawn:
			LSRP A -1;
			Stop;
	}
	
	action void A_FireLaser(double ang = 0, Sound soundid = "weapons/unmaker", double spawnheight = 40, double range = 4096)
    {
        if (invoker.owner == null || player == null || player.mo == null) return;
		invoker.bNOAUTOFIRE = invoker.default.bNOAUTOFIRE;
		Weapon weap = player.ReadyWeapon;
		if (weap != null && invoker == weap && stateinfo != null && stateinfo.mStateType == STATE_Psprite)
		{
			if (!weap.DepleteAmmo (weap.bAltFire, true, 1)) return;
			
		}
		if (soundid != "")
		{
			A_GunFlash();
        	A_StartSound(soundid, CHAN_AUTO, 0, 1.0, ATTN_NORM);
		}

		double angleoffs = invoker.owner.angle+ang;
		FTranslatedLineTarget t;
		double slope = invoker.owner.AimLineAttack(angleoffs, range, t);

		int damage = (random[Laser](0, 7) * 10) + 10; //((P_Random() & 7) * 10) + 10;

		if (t.linetarget)
		{
			angleoffs -= ang;
		}
			
		let puff = DCX_LaserPuff(LineAttack(angleoffs, range, slope, damage, "Hitscan", "DCX_LaserPuff", LAF_NORANDOMPUFFZ, t));
		if (puff)
		{
			double laserDistance = 30;
			Vector2 ofs;
			if (invoker.owner.pitch <= 0)
			{
				ofs = AngleToVector(invoker.owner.angle, laserDistance);
			}
			else
			{
				double offset = invoker.owner.pitch*2 / 3;
				ofs = AngleToVector(invoker.owner.angle, abs(laserDistance-offset));
				if (offset > laserDistance) ofs *= -1;
			}
			double laserAimHeight = spawnheight + (GetBobOffset() + (player ? player.crouchoffset : 0)) - 40;

			let proj = DCX_UnmakerLaser(SpawnPlayerMissile("DCX_UnmakerLaser", angleoffs, ofs.X, ofs.Y, laserAimHeight));
			if (proj)
			{
				AimBulletMissile(proj, puff, 0, false, false);
				if (t.unlinked)
				{
					proj.Angle = angleoffs;
					proj.Pitch = slope;
					proj.Vel3DFromAngle(proj.Speed, proj.Angle, proj.Pitch);
				}
				Vector3 diff = level.vec3diff(proj.pos, puff.pos);
				double length = diff.length();
				Vector3 u = diff.unit();
				double a = atan2(u.y, u.x);
				double p = asin(-u.z);
				proj.A_SetAngle(a, SPF_INTERPOLATE);
				proj.A_SetPitch(p-90, SPF_INTERPOLATE);
				proj.scale.x = 2.0;
				proj.scale.y = length;
				proj.pufftarget = t.linetarget;
				puff.timer = int(length * 0.0334);
			}
		}
    }
	
	override State GetAtkState(bool hold)
    {
        if (owner == null) return super.GetAtkState(hold);
        switch (owner.CountInv("DCX_Demonkeycount"))
        {
            case 1:
                return FindState('FireUpgrade1');
            case 2:
				return (ammo1.amount >= 2) ? FindState('FireUpgrade2') : FindState('FireUpgrade1');
            case 3:
				if (ammo1.amount >= 3)
				{
					return FindState('FireUpgrade3');
				}
				else if (ammo1.amount == 2)
				{
					return FindState('FireUpgrade2');
				}
				else
				{
					return FindState('FireUpgrade1');
				}
            default:
                return FindState('Fire');
        }
    }
}

class DCX_LaserPuff : Actor
{
	int timer;
	int elapsed;
	
	Default
	{
		RenderStyle "Translucent";
		+ZDOOMTRANS
		//RenderStyle "Add";
		+NOGRAVITY;
		+ALLOWPARTICLES;
		+PUFFONACTORS
		+ALWAYSPUFF
		+FORCEXYBILLBOARD
		+NOINTERACTION
        +SKYEXPLODE;
	}
	
	States
	{
		Spawn:
        Crash:
			LSRT B 11 Bright;
			stop;
		Melee:
        Death.Sky:
            TNT1 A 1;
			Stop;
	}
}

class DCX_UnmakerLaser : FastProjectile
{
	
	Actor pufftarget;
	
	Default
	{
		-ACTIVATEIMPACT
		-ACTIVATEPCROSS
        -BLOODSPLATTER
		+BLOODLESSIMPACT
        +NOBLOODDECALS
        +HITTRACER
        +DONTSPLASH
        +FORCEXYBILLBOARD
        +PAINLESS
		+NOINTERACTION
		+NOGRAVITY
        +NOTONAUTOMAP
		+NOBLOCKMAP
		+ZDOOMTRANS
		Radius 1;
		Height 1;
		MissileType "DCX_UnmakerTrail";
		RenderStyle "Translucent";
		Alpha 0.5;
		Damage 0;
		Speed 200;
	}
	States
	{
	Spawn:
		TNT1 A 1 BRIGHT;
		Loop;
	}
	
	override void Tick()
	{
		super.Tick();
		if (pufftarget && pufftarget.health <= 0) Destroy();
	}
}

Class DCX_UnmakerTrail : actor
{
	Default
	{
		PROJECTILE;
		RenderStyle "Translucent";
		+NOCLIP
		-ACTIVATEIMPACT
		-ACTIVATEPCROSS
        -BLOODSPLATTER
		+BLOODLESSIMPACT
        +NOBLOODDECALS
        +HITTRACER
        +DONTSPLASH
        +FORCEXYBILLBOARD
        +PAINLESS
		+NOINTERACTION
		+NOGRAVITY
        +NOTONAUTOMAP
		+NOBLOCKMAP
		+ZDOOMTRANS
		Alpha 0.5;
		Scale 0.5;
		Speed 0;
	}
	States
	{
	Spawn:
		LSRT A 6 Bright;
		Stop;
	}
}

Class DCX_TurkeyPunchers : Fist
{
	Default
	{
		Weapon.SelectionOrder 3700;
		Weapon.Kickback 100;
		Obituary "$OB_MPFIST";
		Attacksound "*fist";
		Tag "$TAG_FIST";
		-WEAPON.WIMPY_WEAPON
		+WEAPON.MELEEWEAPON
		+WEAPON.NOAUTOSWITCHTO
		+WEAPON.NOAUTOFIRE
		+WEAPON.CHEATNOTWEAPON
	}
	States
	{
	Ready:
		PUNG B 1 A_WeaponReady(WRF_DISABLESWITCH|WRF_NOBOB);
		Loop;
	Deselect:
		PUNG B 1 A_Lower;
		Loop;
	Select:
		PUNG B 1 A_Raise;
		Loop;
	Fire:
		//PUNG B 2;
		PUNG C 3;
		PUNG D 3 A_CustomPunch(10, CPF_NOTURN); 
		PUNG C 3;
		//PUNG B 3 A_WeaponReady(WRF_DISABLESWITCH|WRF_NOBOB);
		Goto Ready;
	}
}