//-----------------------------------------------------------------------------
//
// Copyright 1993-2023 id Software, Randy Heit, Christoph Oelckers et.al.
// Copyright 2024 Owlet VII
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see http://www.gnu.org/licenses/
//
//-----------------------------------------------------------------------------
//

class DCX_Statusbar : BaseStatusBar
{
	HUDFont mHUDFont;
	HUDFont mIndexFont;
	HUDFont mAmountFont;
	
	HUDFont mPSXfont;
	HUDFont mPSXfontS;
	
	HUDFont mSATfont;
	HUDFont mSATfontS;
	
	HUDFont mJAGFont;
	InventoryBarState diparms;	
	
	override void Init()
	{
		Super.Init();
		SetSize(32, 320, 200);

		// Create the font used for the fullscreen HUD
		//Font fnt = "FDFONT_PSX";
		Font fnt = "HUDFONT_DOOM";
		mHUDFont = HUDFont.Create(fnt, fnt.GetCharWidth("0"), Mono_CellLeft, 1, 1);
		fnt = "INDEXFONT_DOOM";
		mIndexFont = HUDFont.Create(fnt, fnt.GetCharWidth("0"), Mono_CellLeft);
		mAmountFont = HUDFont.Create("INDEXFONT");
		diparms = InventoryBarState.Create();
		
		mPSXfont = HUDFont.Create("PXFONT_DOOM");
		mPSXfontS = HUDFont.Create("FDFONT_SPSX");
		
		mSATfont = HUDFont.Create("FDFONT_SATURN");
		mSATfontS = HUDFont.Create("FDFONT_SWHITE");
		
		mJAGFont = HUDFont.Create("JAFONT_DOOM");
	}
	
	void Checklevel (double TicFrac)
	{
		let HudValue = 0;
		String mapName = level.MapName.MakeLower();
		if ( ( (Cvar.getcvar("hud_toggle").getint() == 4) && (( mapName.left(2) ~== "E4" ) || ( mapName.left(2) ~== "E5" ) || ( mapName.left(2) ~== "E6" ))) )
		{
			HudValue = 1;
		}
		else
		{
			HudValue = 0;
		}
	}

	override void Draw (int state, double TicFrac)
	{
		Super.Draw (state, TicFrac);

		if (state == HUD_StatusBar)
		{
			BeginStatusBar();
			DrawMainBar (TicFrac);
		}
		else if (state == HUD_Fullscreen)
		{
			BeginHUD();
			DrawFullScreenStuff ();
		}
	}

	protected void DrawMainBar (double TicFrac)
	{
		String mapName = level.MapName.MakeLower();
		let isId1 = mapName.Left(3) == "lr_";
		let id1WeapSwap = CVar.FindCVar("wf_id1_weapswap").GetInt() == 1;
		let id1WeapSwapAlways = CVar.FindCVar("wf_id1_weapswap").GetInt() >= 2;
		let get_font = mHUDFont;
		let x_value = 44;
		let y_value = 171;
		
		if ( (Cvar.getcvar("hud_toggle").getint() == 1) )
		{
			get_font = mPSXfont;
			DrawImage("PXBAR", (-127, 168), DI_ITEM_OFFSETS);
			DrawImage("PXTPRCNT", (90, 171), DI_ITEM_OFFSETS);
			DrawImage("PXTPRCNT", (221, 171), DI_ITEM_OFFSETS);
		}
		else if (Cvar.getcvar("hud_toggle").getint() == 2)
		{
			x_value = 43;
			get_font = mSATfont;
			DrawImage("SABAR", (-82, 168), DI_ITEM_OFFSETS);
			DrawImage("SATPRCNT", (89, 171), DI_ITEM_OFFSETS);
			DrawImage("SATPRCNT", (220, 171), DI_ITEM_OFFSETS);
		}
		else if (Cvar.getcvar("hud_toggle").getint() == 3)
		{
			y_value = 180;
			get_font = mJAGFont;
			DrawImage("JABAR", (-128, 168), DI_ITEM_OFFSETS);
			DrawImage("JATPRCNT", (90, 180), DI_ITEM_OFFSETS);
			DrawImage("JATPRCNT", (221, 180), DI_ITEM_OFFSETS);
		}
		else
		{
			DrawImage("STBAR", (0, 168), DI_ITEM_OFFSETS);
			DrawImage("STTPRCNT", (90, 171), DI_ITEM_OFFSETS);
			DrawImage("STTPRCNT", (221, 171), DI_ITEM_OFFSETS);
		}
		
		if ( ( isId1 && id1WeapSwap ) || id1WeapSwapAlways )
		{
			if ( (Cvar.getcvar("hud_toggle").getint() == 1) )
			DrawImage("PXFUEL", (252, 168), DI_ITEM_OFFSETS);
			else if (Cvar.getcvar("hud_toggle").getint() == 2)
			DrawImage("SAFUEL", (252, 168), DI_ITEM_OFFSETS);
			else if (Cvar.getcvar("hud_toggle").getint() == 3)
			DrawImage("JAFUEL", (249, 168), DI_ITEM_OFFSETS);
			else
			DrawImage("STFUEL", (249, 168), DI_ITEM_OFFSETS);
			//PXFUEL
		}
		
		Inventory a1 = GetCurrentAmmo();
		if (a1 != null) DrawString(get_font, FormatNumber(a1.Amount, 3), (x_value, y_value), DI_TEXT_ALIGN_RIGHT|DI_NOSHADOW);
		DrawString(get_font, FormatNumber(CPlayer.health, 3), (x_value+46, y_value), DI_TEXT_ALIGN_RIGHT|DI_NOSHADOW);
		DrawString(get_font, FormatNumber(GetArmorAmount(), 3), (x_value+177, y_value), DI_TEXT_ALIGN_RIGHT|DI_NOSHADOW);
		
		//PXFONT_DOOM

		DrawBarKeys();
		DrawBarAmmo();
		DrawBarDemonKeys();
		
		if (deathmatch || teamplay)
		{
			DrawString(get_font, FormatNumber(CPlayer.FragCount, 3), (138, 171), DI_TEXT_ALIGN_RIGHT);
		}
		else
		{
			DrawBarWeapons();
		}
		
		if (multiplayer)
		{
			DrawImage("STFBANY", (143, 168), DI_ITEM_OFFSETS|DI_TRANSLATABLE);
		}
		
		if (CPlayer.mo.InvSel != null && !Level.NoInventoryBar)
		{
			DrawInventoryIcon(CPlayer.mo.InvSel, (160, 198), DI_DIMDEPLETED);
			if (CPlayer.mo.InvSel.Amount > 1)
			{
				DrawString(mAmountFont, FormatNumber(CPlayer.mo.InvSel.Amount), (175, 198-mIndexFont.mFont.GetHeight()), DI_TEXT_ALIGN_RIGHT, Font.CR_GOLD);
			}
		}
		else
		{
			DrawTexture(GetMugShot(5), (143, 168), DI_ITEM_OFFSETS);
		}
		if (isInventoryBarVisible())
		{
			DrawInventoryBar(diparms, (48, 169), 7, DI_ITEM_LEFT_TOP);
		}
		
	}
	
	protected virtual void DrawBarKeys()
	{
		bool locks[6];
		String image;
		for(int i = 0; i < 6; i++) locks[i] = CPlayer.mo.CheckKeys(i + 1, false, true);

		String mapName = level.MapName.MakeLower();
		
		if ( (Cvar.getcvar("hud_toggle").getint() == 1) )
		{	
			// key 1
			if (locks[1] && locks[4]) image = "PXKEYS6";
			else if (locks[1]) image = "PXKEYS0";
			else if (locks[4]) image = "PXKEYS3";
			DrawImage(image, (239, 170), DI_ITEM_OFFSETS);
			// key 2
			if (locks[2] && locks[5]) image = "PXKEYS7";
			else if (locks[2]) image = "PXKEYS1";
			else if (locks[5]) image = "PXKEYS4";
			else image = "";
			DrawImage(image, (239, 180), DI_ITEM_OFFSETS);
			// key 3
			if (locks[0] && locks[3]) image = "PXKEYS8";
			else if (locks[0]) image = "PXKEYS2";
			else if (locks[3]) image = "PXKEYS5";
			else image = "";
			DrawImage(image, (239, 190), DI_ITEM_OFFSETS);
		}
		else
		{
			// key 1
			if (locks[1] && locks[4]) image = "STKEYS6";
			else if (locks[1]) image = "STKEYS0";
			else if (locks[4]) image = "STKEYS3";
			DrawImage(image, (239, 171), DI_ITEM_OFFSETS);
			// key 2
			if (locks[2] && locks[5]) image = "STKEYS7";
			else if (locks[2]) image = "STKEYS1";
			else if (locks[5]) image = "STKEYS4";
			else image = "";
			DrawImage(image, (239, 181), DI_ITEM_OFFSETS);
			// key 3
			if (locks[0] && locks[3]) image = "STKEYS8";
			else if (locks[0]) image = "STKEYS2";
			else if (locks[3]) image = "STKEYS5";
			else image = "";
			DrawImage(image, (239, 191), DI_ITEM_OFFSETS);
		}
	}
	
	protected virtual void DrawBarDemonKeys()
	{
		bool locks[6];
		String image;
		static const Class<Inventory> Demon_keys[] =
		{
			'DCX_Orangekeyicon',
			'DCX_Purplekeyicon',
			'DCX_Cyankeyicon'
		};
		
			if(CPlayer.mo.countinv(Demon_keys[0])) image = "DKICONO";
			else image = "";
			DrawImage(image, (237, 170), DI_ITEM_OFFSETS);
		
			if(CPlayer.mo.countinv(Demon_keys[1])) image = "DKICONP";
			else image = "";
			DrawImage(image, (237, 180), DI_ITEM_OFFSETS);
		
			if(CPlayer.mo.countinv(Demon_keys[2])) image = "DKICONC";
			else image = "";
			DrawImage(image, (237, 190), DI_ITEM_OFFSETS);
	}
	
	protected virtual void DrawBarAmmo()
	{
		String mapName = level.MapName.MakeLower();
		String mapPrefix = level.MapName.Left(3);
		mapPrefix = mapPrefix.MakeLower();
		let isId1 = mapName.Left(3) == "lr_";
		let id1WeapSwap = CVar.FindCVar("wf_id1_weapswap").GetInt() == 1;
		let id1WeapSwapAlways = CVar.FindCVar("wf_id1_weapswap").GetInt() >= 2;
		let cell = CPlayer.mo.FindInventory("Cell");
		let fuel = CPlayer.mo.FindInventory("Fuel");
		let hasPlasmaRifle = CPlayer.mo.FindInventory("PlasmaRifle");
		let hasBfg9000 = CPlayer.mo.FindInventory("BFG9000");
		let hasIncinerator = CPlayer.mo.FindInventory("Incinerator");
		let hasHeatwave = CPlayer.mo.FindInventory("Heatwave");
		int x_value;
		int y_value;
		int x_offset;
		let get_font = mIndexFont;
		
		// Only show id24 style ammo if the player has both cell and fuel ammo, or if wf_hud_id24 is true
		if ( CVar.FindCVar("wf_hud_id24").GetBool() ||
			( isId1 && id1WeapSwap && cell != null && ( hasPlasmaRifle || hasBfg9000 ) ) ||
			( isId1 && !id1WeapSwap && fuel != null && ( hasIncinerator || hasHeatwave ) ) ||
			( !isId1 && id1WeapSwapAlways && cell != null && ( hasPlasmaRifle || hasBfg9000 ) ) ||
			( !isId1 && !id1WeapSwapAlways && fuel != null && ( hasIncinerator || hasHeatwave ) ) )
		{
			if ( (Cvar.getcvar("hud_toggle").getint() == 1) )
			{	
				x_value = 290; x_offset = 22; y_value = 169; get_font = mPSXfontS;
				DrawImage("PXAMMO24", (252, 168), DI_ITEM_OFFSETS);
			}
			else if (Cvar.getcvar("hud_toggle").getint() == 2)
			{	
				x_value = 290; x_offset = 22; y_value = 169; get_font = mSATfontS;
				DrawImage("SAAMMO24", (251, 168), DI_ITEM_OFFSETS);
			}
			else if (Cvar.getcvar("hud_toggle").getint() == 3)
			{
				x_value = 288; x_offset = 26; y_value = 170;
				DrawImage("JAAMMO24", (249, 168), DI_ITEM_OFFSETS);
			}
			else
			{
				x_value = 288; x_offset = 26; y_value = 169;
				DrawImage("STAMMO24", (249, 168), DI_ITEM_OFFSETS);
			}

			int amt1, maxamt;
			[amt1, maxamt] = GetAmount("Clip");
			DrawString(get_font, FormatNumber(amt1, 3), (x_value, y_value), DI_TEXT_ALIGN_RIGHT);
			DrawString(get_font, FormatNumber(maxamt, 3), (x_value+x_offset, y_value), DI_TEXT_ALIGN_RIGHT);
			
			[amt1, maxamt] = GetAmount("Shell");
			DrawString(get_font, FormatNumber(amt1, 3), (x_value, y_value+6), DI_TEXT_ALIGN_RIGHT);
			DrawString(get_font, FormatNumber(maxamt, 3), (x_value+x_offset, y_value+6), DI_TEXT_ALIGN_RIGHT);
			
			[amt1, maxamt] = GetAmount("RocketAmmo");
			DrawString(get_font, FormatNumber(amt1, 3), (x_value, y_value+12), DI_TEXT_ALIGN_RIGHT);
			DrawString(get_font, FormatNumber(maxamt, 3), (x_value+x_offset, y_value+12), DI_TEXT_ALIGN_RIGHT);
			
			[amt1, maxamt] = GetAmount("Cell");
			DrawString(get_font, FormatNumber(amt1, 3), (x_value, y_value+18), DI_TEXT_ALIGN_RIGHT);
			DrawString(get_font, FormatNumber(maxamt, 3), (x_value+x_offset, y_value+18), DI_TEXT_ALIGN_RIGHT);
			
			[amt1, maxamt] = GetAmount("Fuel");
			DrawString(get_font, FormatNumber(amt1, 3), (x_value, y_value+24), DI_TEXT_ALIGN_RIGHT);
			DrawString(get_font, FormatNumber(maxamt, 3), (x_value+x_offset, y_value+24), DI_TEXT_ALIGN_RIGHT);
		}
		else
		{
			if ( (Cvar.getcvar("hud_toggle").getint() == 1) )
			{	
				x_value = 290; x_offset = 22; y_value = 171;				
				get_font = mPSXfontS;
			}
			else if (Cvar.getcvar("hud_toggle").getint() == 2)
			{
				x_value = 288; x_offset = 26; y_value = 173;
				get_font = mSATfontS;
			}
			else if (Cvar.getcvar("hud_toggle").getint() == 3)
			{
				x_value = 288; x_offset = 26; y_value = 172;
			}
			else
			{
				x_value = 288; x_offset = 26; y_value = 173;
			}
			
			/*
				X offset is only for the max ammo display that goes to the right of the current ammo.
				
				The higher the value, the father the numbers are from eachother.
			*/
		
			int amt1, maxamt;
			[amt1, maxamt] = GetAmount("Clip");
			DrawString(get_font, FormatNumber(amt1, 3), (x_value, y_value), DI_TEXT_ALIGN_RIGHT);
			DrawString(get_font, FormatNumber(maxamt, 3), (x_value+x_offset, y_value), DI_TEXT_ALIGN_RIGHT);
			
			[amt1, maxamt] = GetAmount("Shell");
			DrawString(get_font, FormatNumber(amt1, 3), (x_value, y_value+6), DI_TEXT_ALIGN_RIGHT);
			DrawString(get_font, FormatNumber(maxamt, 3), (x_value+x_offset, y_value+6), DI_TEXT_ALIGN_RIGHT);
			
			[amt1, maxamt] = GetAmount("RocketAmmo");
			DrawString(get_font, FormatNumber(amt1, 3), (x_value, y_value+12), DI_TEXT_ALIGN_RIGHT);
			DrawString(get_font, FormatNumber(maxamt, 3), (x_value+x_offset, y_value+12), DI_TEXT_ALIGN_RIGHT);
			
			if ( ( isId1 && id1WeapSwap ) || id1WeapSwapAlways )
			{
				[amt1, maxamt] = GetAmount("Fuel");
				DrawString(get_font, FormatNumber(amt1, 3), (x_value, y_value+18), DI_TEXT_ALIGN_RIGHT);
				DrawString(get_font, FormatNumber(maxamt, 3), (x_value+x_offset, y_value+18), DI_TEXT_ALIGN_RIGHT);
			}
			else
			{
				[amt1, maxamt] = GetAmount("Cell");
				DrawString(get_font, FormatNumber(amt1, 3), (x_value, y_value+18), DI_TEXT_ALIGN_RIGHT);
				DrawString(get_font, FormatNumber(maxamt, 3), (x_value+x_offset, y_value+18), DI_TEXT_ALIGN_RIGHT);
			}
		}
	}
	
	protected virtual void DrawBarWeapons()
	{
		String mapName = level.MapName.MakeLower();
		
		if ( (Cvar.getcvar("hud_toggle").getint() == 1) )
		{
			DrawImage("PXARMS", (104, 168), DI_ITEM_OFFSETS);
			DrawImage(CPlayer.HasWeaponsInSlot(2)? "PXYSNUM2" : "PXGNUM2", (110, 170), DI_ITEM_OFFSETS);
			DrawImage(CPlayer.HasWeaponsInSlot(3)? "PXYSNUM3" : "PXGNUM3", (122, 170), DI_ITEM_OFFSETS);
			DrawImage(CPlayer.HasWeaponsInSlot(4)? "PXYSNUM4" : "PXGNUM4", (134, 170), DI_ITEM_OFFSETS);
			DrawImage(CPlayer.HasWeaponsInSlot(5)? "PXYSNUM5" : "PXGNUM5", (110, 180), DI_ITEM_OFFSETS);
			DrawImage(CPlayer.HasWeaponsInSlot(6)? "PXYSNUM6" : "PXGNUM6", (122, 180), DI_ITEM_OFFSETS);
			DrawImage(CPlayer.HasWeaponsInSlot(7)? "PXYSNUM7" : "PXGNUM7", (134, 180), DI_ITEM_OFFSETS);
		}
		else if (Cvar.getcvar("hud_toggle").getint() == 2)
		{
			//SAARMS
			DrawImage("SAARMS", (103, 168), DI_ITEM_OFFSETS);
			DrawImage(CPlayer.HasWeaponsInSlot(2)? "SWYSNUM2" : "TNGNUM2", (109, 172), DI_ITEM_OFFSETS);
			DrawImage(CPlayer.HasWeaponsInSlot(3)? "SWYSNUM3" : "TNGNUM3", (121, 172), DI_ITEM_OFFSETS);
			DrawImage(CPlayer.HasWeaponsInSlot(4)? "SWYSNUM4" : "TNGNUM4", (133, 172), DI_ITEM_OFFSETS);
			DrawImage(CPlayer.HasWeaponsInSlot(5)? "SWYSNUM5" : "TNGNUM5", (109, 182), DI_ITEM_OFFSETS);
			DrawImage(CPlayer.HasWeaponsInSlot(6)? "SWYSNUM6" : "TNGNUM6", (121, 182), DI_ITEM_OFFSETS);
			DrawImage(CPlayer.HasWeaponsInSlot(7)? "SWYSNUM7" : "TNGNUM7", (133, 182), DI_ITEM_OFFSETS);
		}
		else if (Cvar.getcvar("hud_toggle").getint() == 3)
		{
			DrawImage("JAARMS", (104, 168), DI_ITEM_OFFSETS);
			DrawImage(CPlayer.HasWeaponsInSlot(2)? "STYSNUM2" : "STGNUM2", (111, 181), DI_ITEM_OFFSETS);
			DrawImage(CPlayer.HasWeaponsInSlot(3)? "STYSNUM3" : "STGNUM3", (123, 181), DI_ITEM_OFFSETS);
			DrawImage(CPlayer.HasWeaponsInSlot(4)? "STYSNUM4" : "STGNUM4", (135, 181), DI_ITEM_OFFSETS);
			DrawImage(CPlayer.HasWeaponsInSlot(5)? "STYSNUM5" : "STGNUM5", (111, 191), DI_ITEM_OFFSETS);
			DrawImage(CPlayer.HasWeaponsInSlot(6)? "STYSNUM6" : "STGNUM6", (123, 191), DI_ITEM_OFFSETS);
			DrawImage(CPlayer.HasWeaponsInSlot(7)? "STYSNUM7" : "STGNUM7", (135, 191), DI_ITEM_OFFSETS);
		}
		else
		{
			DrawImage("STARMS", (104, 168), DI_ITEM_OFFSETS);
			DrawImage(CPlayer.HasWeaponsInSlot(2)? "STYSNUM2" : "STGNUM2", (111, 172), DI_ITEM_OFFSETS);
			DrawImage(CPlayer.HasWeaponsInSlot(3)? "STYSNUM3" : "STGNUM3", (123, 172), DI_ITEM_OFFSETS);
			DrawImage(CPlayer.HasWeaponsInSlot(4)? "STYSNUM4" : "STGNUM4", (135, 172), DI_ITEM_OFFSETS);
			DrawImage(CPlayer.HasWeaponsInSlot(5)? "STYSNUM5" : "STGNUM5", (111, 182), DI_ITEM_OFFSETS);
			DrawImage(CPlayer.HasWeaponsInSlot(6)? "STYSNUM6" : "STGNUM6", (123, 182), DI_ITEM_OFFSETS);
			DrawImage(CPlayer.HasWeaponsInSlot(7)? "STYSNUM7" : "STGNUM7", (135, 182), DI_ITEM_OFFSETS);
		}
	}

	protected void DrawFullScreenStuff ()
	{
		// Set ultrawide
		int ultraWide = CVar.FindCVar("wf_hud_ultrawide").GetInt();
		
		Vector2 iconbox = (40, 20);
		// Draw health
		let berserk = CPlayer.mo.FindInventory("PowerStrength");
		int hudArmorOffset;
		if ( CVar.FindCVar("wf_hud_swaphealtharmor").GetBool() )
				hudArmorOffset = 20;
		DrawImage(berserk? "PSTRA0" : "MEDIA0", (20 + ultraWide, -2 - hudArmorOffset));
		DrawString(mHUDFont, FormatNumber(CPlayer.health, 3), (44 + ultraWide, -20 - hudArmorOffset));
		
		let armor = CPlayer.mo.FindInventory("BasicArmor");
		int hudHealthOffset;
		if ( CVar.FindCVar("wf_hud_swaphealtharmor").GetBool() )
				hudHealthOffset = 20;
		if (armor != null && armor.Amount > 0)
		{
			DrawInventoryIcon(armor, (20 + ultraWide, -22 + hudHealthOffset));
			DrawString(mHUDFont, FormatNumber(armor.Amount, 3), (44 + ultraWide, -40 + hudHealthOffset));
		}
		Inventory ammotype1, ammotype2;
		[ammotype1, ammotype2] = GetCurrentAmmo();
		int invY = -20;
		if (ammotype1 != null)
		{
			DrawInventoryIcon(ammotype1, (-14 - ultraWide, -4));
			DrawString(mHUDFont, FormatNumber(ammotype1.Amount, 3), (-30 - ultraWide, -20), DI_TEXT_ALIGN_RIGHT);
			invY -= 20;
		}
		if (ammotype2 != null && ammotype2 != ammotype1)
		{
			DrawInventoryIcon(ammotype2, (-14 - ultraWide, invY + 17));
			DrawString(mHUDFont, FormatNumber(ammotype2.Amount, 3), (-30 - ultraWide, invY), DI_TEXT_ALIGN_RIGHT);
			invY -= 20;
		}
		if (!isInventoryBarVisible() && !Level.NoInventoryBar && CPlayer.mo.InvSel != null)
		{
			DrawInventoryIcon(CPlayer.mo.InvSel, (-14 - ultraWide, invY + 17), DI_DIMDEPLETED);
			DrawString(mHUDFont, FormatNumber(CPlayer.mo.InvSel.Amount, 3), (-30 - ultraWide, invY), DI_TEXT_ALIGN_RIGHT);
		}
		if (deathmatch)
		{
			DrawString(mHUDFont, FormatNumber(CPlayer.FragCount, 3), (-3 - ultraWide, 1), DI_TEXT_ALIGN_RIGHT, Font.CR_GOLD);
		}
		else
		{
			DrawFullscreenKeys();
			DrawFullDemonKeys();
		}
		
		if (isInventoryBarVisible())
		{
			DrawInventoryBar(diparms, (0, 0), 7, DI_SCREEN_CENTER_BOTTOM, HX_SHADOW);
		}
	}
	
	protected virtual void DrawFullscreenKeys()
	{
		// Draw the keys. This does not use a special draw function like SBARINFO because the specifics will be different for each mod
		// so it's easier to copy or reimplement the following piece of code instead of trying to write a complicated all-encompassing solution.
		Vector2 keypos = (-10, 2);
		int rowc = 0;
		double roww = 0;
		for(let i = CPlayer.mo.Inv; i != null; i = i.Inv)
		{
			if (i is "Key" && i.Icon.IsValid())
			{
				DrawTexture(i.Icon, keypos, DI_SCREEN_RIGHT_TOP|DI_ITEM_LEFT_TOP);
				Vector2 size = TexMan.GetScaledSize(i.Icon);
				keypos.Y += size.Y + 2;
				roww = max(roww, size.X);
				if (++rowc == 3)
				{
					keypos.Y = 2;
					keypos.X -= roww + 2;
					roww = 0;
					rowc = 0;
				}
			}
		}
	}
	
	protected virtual void DrawFullDemonKeys()
	{
		bool locks[6];
		String image;
		static const Class<Inventory> Demon_keys[] =
		{
			'DCX_Orangekeyicon',
			'DCX_Purplekeyicon',
			'DCX_Cyankeyicon'
		};
			if(CPlayer.mo.countinv(Demon_keys[0])) image = "STDKEY1";
			else image = "";
			DrawImage(image, (2, 2), DI_ITEM_OFFSETS);
		
			if(CPlayer.mo.countinv(Demon_keys[1])) image = "STDKEY2";
			else image = "";
			DrawImage(image, (2, 11), DI_ITEM_OFFSETS);
		
			if(CPlayer.mo.countinv(Demon_keys[2])) image = "STDKEY3";
			else image = "";
			DrawImage(image, (2, 20), DI_ITEM_OFFSETS);
	}
}
